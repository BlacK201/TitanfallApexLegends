#if(true)//

//
//

#if CLIENT || UI 
global function ShChallenges_LevelInit_PreStats
global function ShChallenges_LevelInit_PostStats
global function GetAllChallenges
global function Challenge_GetTierCount
global function Challenge_GetCurrentTier
global function Challenge_IsComplete
global function Challenge_GetTimeSpanKind
global function Challenge_GetCharacterOrNull
global function Challenge_GetGoalVal
global function Challenge_GetXPReward
global function Challenge_GetItemRewards
global function Challenge_GetStatRef
global function Challenge_IsPremium
global function Challenge_GetProgressValue
#endif

#if(false)

#endif

#if(false)

#endif

#if(false)





#endif

#if CLIENT && DEV 
global function PrintAllChallenges
#endif

#if(CLIENT)
global function ServerToClient_ChallengeDataDidChange
#elseif(UI)
global function GetChallengeGroupData
global function ServerToUI_ChallengeDataDidChange
global function UpdateLobbyChallengeMenu
#endif

#if CLIENT || UI 
global function UpdateChallengeBoxRows
global function Challenge_GetDescription
#endif

//
const int NUM_DAILY_CHALLENGES = 3
//
const int NUM_WEEKLY_CHALLENGES = 10
const int NUM_WEEKS = 12
const int NUM_CHALLENGES_MAX = (NUM_WEEKLY_CHALLENGES * NUM_WEEKS) + NUM_DAILY_CHALLENGES//
//

//
//
//
//
//

#if CLIENT || UI 
global enum eChallengeTimeSpanKind
{
	DAILY,
	SEASON_WEEKLY,
	SEASON_WEEKLY_RECURRING,
	EVENT,
}
#endif


#if(UI)
global struct ChallengeGroupData
{
	string            groupName
	array<ItemFlavor> challenges
	int               completedChallenges
}
#endif



//
//
//
//
//

#if CLIENT || UI 
struct ChallengeState
{
	int         persistenceIdx = -1
	ItemFlavor& flav
}
#endif


#if CLIENT || UI 
struct PlayerChallengesState
{
	table<ItemFlavor, ChallengeState>   challengeStateMap
	array<ChallengeState ornull>        persistentArrayMirror
}
#endif


#if CLIENT || UI 
struct FileStruct_LifetimeLevel
{
	//
	table<StatEntry, array<ItemFlavor> > statEntryChallengesMap

	#if(false)

#elseif CLIENT || UI 
		PlayerChallengesState localPlayerChallengesState
	#endif
}
FileStruct_LifetimeLevel& fileLevel
#endif



//
//
//
//
//

#if CLIENT || UI 
void function ShChallenges_LevelInit_PreStats()
{
	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	AddCallback_OnItemFlavorRegistered( eItemType.challenge, OnChallengeRegistered )

	#if(false)

#endif

	#if(CLIENT)
		Remote_RegisterClientFunction( "ServerToClient_ChallengeDataDidChange" )
	#endif

	//
	AddCallback_RegisterRootItemFlavors( void function() {
		foreach ( asset challengeAsset in WORKAROUND_GetAllChallengeAssets() )
		{
			//
			var settingsBlock = GetSettingsBlockForAsset( challengeAsset )
			var tierDataArray = GetSettingsBlockArray( settingsBlock, "tiers" )
			for ( int i = 0 ; i < GetSettingsArraySize( tierDataArray ) ; i++ )
			{
				var tierBlock        = GetSettingsArrayElem( tierDataArray, i )
				asset characterAsset = GetSettingsBlockAsset( tierBlock, "character" )

				if ( characterAsset != $"" && !IsValidItemFlavorSettingsAsset( characterAsset ) )
				{
					Warning( "Skipping challenge %s because character %s is not registered", string(challengeAsset), string(characterAsset) )
					continue
				}
			}

			//
			ItemFlavor ornull challenge = RegisterItemFlavorFromSettingsAsset( challengeAsset )
		}
	} )
}
#endif


#if CLIENT || UI 
void function ShChallenges_LevelInit_PostStats()
{
	foreach ( ItemFlavor challenge in GetAllChallenges() )
	{
		int tierCount = Challenge_GetTierCount( challenge )
		for ( int i = 0 ; i < tierCount ; i++ )
		{
			string statRef = Challenge_GetStatRef( challenge, i )

			//

			if ( !IsValidStatEntryRef( statRef ) )
			{
				Assert( 0, format( "Challenge '%s' tier %d refers to non-existant stat: '%s'", ItemFlavor_GetHumanReadableRef( challenge ), i, statRef ) )
				continue
			}

			StatEntry stat = GetStatEntryByRef( statRef )

			if ( (StatEntry_GetFlags( stat ) & eStatFlags.STORE_START_OF_PREVIOUS_MATCH) == 0 )
			{
				Assert( 0, format( "Challenge '%s' refers to stat that does have the STORE_END_OF_PREVIOUS_MATCH flag: '%s'", ItemFlavor_GetHumanReadableRef( challenge ), statRef ) )
				continue
			}

			if ( Challenge_GetGoalVal( challenge, i ) <= 0 )
			{
				Assert( 0, format( "Challenge '%s' has invalid goal val: %d", ItemFlavor_GetHumanReadableRef( challenge ), Challenge_GetGoalVal( challenge, i ) ) )
				continue
			}

			if ( !(stat in fileLevel.statEntryChallengesMap) )
				fileLevel.statEntryChallengesMap[ stat ] <- []
			fileLevel.statEntryChallengesMap[ stat ].append( challenge )
		}
	}

	#if(UI)
		ServerToUI_ChallengeDataDidChange() //
	#endif
}
#endif


#if(false)










//













#endif


#if CLIENT || UI 
void function OnChallengeRegistered( ItemFlavor challenge )
{
	//
}
#endif


#if(false)















#endif


#if(CLIENT)
void function ServerToClient_ChallengeDataDidChange()
{
	InitPlayerChallengesStateFromPersistence( GetLocalClientPlayer(), fileLevel.localPlayerChallengesState )

	RunUIScript( "ServerToUI_ChallengeDataDidChange" )
}
#endif


#if(UI)
void function ServerToUI_ChallengeDataDidChange()
{
	InitPlayerChallengesStateFromPersistence( GetUIPlayer(), fileLevel.localPlayerChallengesState )

	if ( IsLobby() )
		UpdateLobbyChallengeMenu()
}
#endif


#if(UI)
void function UpdateLobbyChallengeMenu()
{
	printt( "[Challenges] Updating Lobby Challenge Display" )

	//
	var playPanel              = GetPanel( "PlayPanel" )
	var challengesBoxHeader    = Hud_GetChild( playPanel, "ChallengesBox" )
	var challengesBoxHeaderRui = Hud_GetRui( challengesBoxHeader )

	int rowCount = 3
	if ( IsSeason01EventActive() )
	{
		rowCount = 4
		Hud_SetPinSibling( Hud_GetChild( playPanel, "AllChallengesButton" ), "ChallengeButton3" )
		Hud_SetPinSibling( Hud_GetChild( playPanel, "OpenLootBoxButton" ), "OpenLootBoxButtonAnchorWithChallenges" )

		int endTime           = CalEvent_GetFinishUnixTime( GetItemFlavorByAsset( $"settings/itemflav/calevent/season01_event.rpak" ) )
		int remainingDuration = endTime - GetUnixTimestamp()
		RuiSetGameTime( challengesBoxHeaderRui, "expireTime", remainingDuration > 0 ? Time() + remainingDuration : RUI_BADGAMETIME )
	}
	else
	{
		Hud_SetPinSibling( Hud_GetChild( playPanel, "OpenLootBoxButton" ), "OpenLootBoxButtonAnchorWithoutChallenges" )
	}

	array<var> btnList = []
	for ( int rowIdx = 0; rowIdx < 4; rowIdx++ )
	{
		var btn = Hud_GetChild( playPanel, "ChallengeButton" + rowIdx )
		btnList.append( btn )
	}

	bool anyChallengesDisplayed = UpdateChallengeBoxRows( rowCount, challengesBoxHeaderRui, btnList )
	Hud_SetVisible( challengesBoxHeader, anyChallengesDisplayed )
}
#endif



//
//
//
//
//

#if(UI)
array<ChallengeGroupData> function GetChallengeGroupData()
{
	array<ChallengeGroupData> groupData

	groupData.append( CreateChallengeGroup( Localize( "#CHALLENGE_GROUP_DAILY" ), GetAssignedChallengesByTimeSpan( GetUIPlayer(), eChallengeTimeSpanKind.DAILY ) ) )
	array<ItemFlavor> challenges = []

	//
	challenges = GetAssignedChallengesByTimeSpan( GetUIPlayer(), eChallengeTimeSpanKind.SEASON_WEEKLY_RECURRING )
	groupData.append( CreateChallengeGroup( Localize( "#CHALLENGE_GROUP_SEASON_WEEKLY_RECURRING" ), challenges ) )

	//
	for ( int i = 1 ; i <= 12 ; i++ )
	{
		challenges = []
		challenges.extend( GetAssignedChallengesByTimeSpan( GetUIPlayer(), eChallengeTimeSpanKind.DAILY ) )
		challenges.extend( GetAssignedChallengesByTimeSpan( GetUIPlayer(), eChallengeTimeSpanKind.DAILY ) )
		challenges.extend( GetAssignedChallengesByTimeSpan( GetUIPlayer(), eChallengeTimeSpanKind.DAILY ) )
		challenges.extend( GetAssignedChallengesByTimeSpan( GetUIPlayer(), eChallengeTimeSpanKind.DAILY ) )
		challenges.resize( RandomIntRange( 4, 12 ) )
		challenges.randomize()

		groupData.append( CreateChallengeGroup( Localize( "#CHALLENGE_GROUP_WEEKLY", i ), challenges ) )
	}

	return groupData
}
#endif


#if(false)










//









//
//
//















//






//





//










//
//
//
//
//
//
//
//
//
//


//











#endif


#if CLIENT || UI 
PlayerChallengesState function GetPlayerChallengesState( entity player = null )
{
	player = AssertLocalOrServerValidPlayer( player )
	#if(false)

#elseif CLIENT || UI 
		return fileLevel.localPlayerChallengesState
	#endif
}
#endif


#if CLIENT || UI 
void function InitPlayerChallengesStateFromPersistence( entity player, PlayerChallengesState pcs )
{
	#if(DEV)
		if ( DEV_ShouldIgnorePersistence() )
			return
	#endif

	foreach ( ChallengeState ornull cs in pcs.persistentArrayMirror )
	{
		if ( cs == null )
			continue
		expect ChallengeState(cs)
		cs.persistenceIdx = -1
		ItemFlavor badItemFlav
		cs.flav = badItemFlav
	}
	pcs.persistentArrayMirror.clear()
	pcs.persistentArrayMirror.resize( NUM_CHALLENGES_MAX, null )
	pcs.challengeStateMap.clear()
	for ( int persistentArrayIdx = 0 ; persistentArrayIdx < NUM_CHALLENGES_MAX ; persistentArrayIdx++ )
	{
		int guid                        = player.GetPersistentVarAsInt( "challenges[" + persistentArrayIdx + "].guid" )
		ItemFlavor ornull challengeFlav = GetItemFlavorOrNullByGUID( guid, eItemType.challenge )
		if ( challengeFlav == null )
			continue
		expect ItemFlavor( challengeFlav )

		ChallengeState cs
		cs.persistenceIdx = persistentArrayIdx
		cs.flav = challengeFlav
		pcs.challengeStateMap[cs.flav] <- cs
		pcs.persistentArrayMirror[persistentArrayIdx] = cs
	}
}
#endif


#if(false)











//









//






//













//











//




#endif


#if(false)







//
















#endif


#if(false)












//






//








//














//
















#endif


#if(false)





//
























//






#endif


#if(false)

















#endif


#if(false)














#endif


#if(false)














#endif


#if(false)








//


#endif


#if(false)








//


#endif


#if(false)






























#endif


#if CLIENT && DEV 
void function PrintAllChallenges()
{
	array<ItemFlavor> allChallenges = GetAllChallenges()

	array<string> ref            = []
	array<string> desc           = []
	array<string> xpReward       = []
	array<string> bpLevelsReward = []
	array<string> type           = []

	int refLen            = 0
	int descLen           = 0
	int xpRewardLen       = 0
	int bpLevelsRewardLen = 0
	int typeLen           = 0

	printt( "------- ALL CHALLENGES -------" )
	foreach( ItemFlavor challenge in allChallenges )
	{
		string _type = GetEnumString( "eChallengeTimeSpanKind", Challenge_GetTimeSpanKind( challenge ) )

		int tierCount = Challenge_GetTierCount( challenge )
		for ( int i = 0 ; i < tierCount ; i++ )
		{
			string _ref = i == 0 ? ItemFlavor_GetHumanReadableRef( challenge ) : ""

			string _desc = Challenge_GetDescription( challenge, i )
			_desc = StringReplace( _desc, "`1", "" )
			_desc = StringReplace( _desc, "`0", "" )
			_desc = StringReplace( _desc, "\n", " " )
			if ( tierCount > 1 )
				_desc = (i + 1) + ") " + _desc

			string _xpReward       = format( "Grind Lord XP: %d", Challenge_GetXPReward( challenge, i ) )
			string _bpLevelsReward = format( "   BP Levels: %d", Challenge_GetBattlepassLevelsReward( challenge, i ) )

			ref.append( _ref )
			desc.append( _desc )
			xpReward.append( _xpReward )
			bpLevelsReward.append( _bpLevelsReward )
			type.append( _type )

			if ( _ref.len() > refLen )
				refLen = _ref.len()
			if ( _desc.len() > descLen )
				descLen = _desc.len()
			if ( _xpReward.len() > xpRewardLen )
				xpRewardLen = _xpReward.len()
			if ( _bpLevelsReward.len() > bpLevelsRewardLen )
				bpLevelsRewardLen = _bpLevelsReward.len()
			if ( _type.len() > typeLen )
				typeLen = _type.len()
		}
	}

	Assert( desc.len() == ref.len() && xpReward.len() == ref.len() && bpLevelsReward.len() == ref.len() && type.len() == ref.len() )

	for ( int i = 0 ; i < ref.len() ; i++ )
	{
		string _ref            = ref[i]
		string _desc           = desc[i]
		string _xpReward       = xpReward[i]
		string _bpLevelsReward = bpLevelsReward[i]
		string _type           = type[i]

		while( _ref.len() < refLen )
			_ref += " "
		while( _desc.len() < descLen )
			_desc += " "
		while( _xpReward.len() < xpRewardLen )
			_xpReward += " "
		while( _bpLevelsReward.len() < bpLevelsRewardLen )
			_bpLevelsReward += " "
		while( _type.len() < typeLen )
			_type += " "

		printl( format( "%s  %s  %s  %s  %s", _ref, _desc, _xpReward, _bpLevelsReward, _type ) )
	}

	printt( "------------------------------" )
	printt( "  Total Challenges:", allChallenges.len() )
	printt( "------------------------------" )
}
#endif


#if CLIENT || UI 
array<ItemFlavor> function GetAssignedChallengesByTimeSpan( entity player, int timeSpan )
{
	Assert( timeSpan >= 0 && timeSpan < eChallengeTimeSpanKind.len() )

	PlayerChallengesState pcs = GetPlayerChallengesState( player )

	array<ItemFlavor> results
	foreach ( ItemFlavor challengeFlav, ChallengeState cs in pcs.challengeStateMap )
	{
		if ( CharacterClass_GetTimeSpan( challengeFlav ) == timeSpan )
			results.append( challengeFlav )
	}

	return results
}
#endif


#if CLIENT || UI 
table<var, void functionref(var)> WORKAROUND_challengeButtonToClickHandlerMap = {} //
bool function UpdateChallengeBoxRows( int rowCount, var mainRUI, array<var> buttonList )
{
	//

	string headerText                   = ""
	asset headerIcon                    = $""
	array<ItemFlavor> displayChallenges = []

	if ( IsSeason01EventActive() )
	{
		headerText = Localize( "#BEASTHUNTER_CHALLENGES_HEADER" )
		headerIcon = $"rui/gladiator_cards/badges/beasthunter_event"
		displayChallenges = GetAssignedChallengesByTimeSpan( GetLocalClientPlayer(), eChallengeTimeSpanKind.EVENT )
	}
#if(false)






#endif

	if ( mainRUI != null )
	{
		RuiSetString( mainRUI, "headerText", headerText )
		RuiSetImage( mainRUI, "headerIcon", headerIcon )
	}

	for ( int rowIdx = 0 ; rowIdx < maxint( rowCount, buttonList.len() ); rowIdx++ )
	{
		var button    = null
		var rui       = mainRUI
		string suffix = string(rowIdx)
		#if(UI)
			if ( buttonList.len() > 0 )
			{
				button = buttonList[rowIdx]
				rui = Hud_GetRui( button )
				suffix = ""
			}
		#endif

		if ( rowIdx >= displayChallenges.len() || rowIdx >= rowCount )
		{
			if ( rui != null )
			{
				RuiSetString( rui, "challengeText" + suffix, "" )
				RuiSetInt( rui, "challengeProgress" + suffix, 0 )
				RuiSetInt( rui, "challengeGoal" + suffix, 0 )
				RuiSetString( rui, "rewardString" + suffix, "" )
				RuiSetInt( rui, "tierCount" + suffix, 1 )
				RuiSetInt( rui, "activeTier" + suffix, 0 )
			}
			#if(UI)
				if ( button != null )
					Hud_Hide( button )
			#endif
			continue
		}

		ItemFlavor challenge = displayChallenges[rowIdx]
		int tierCount        = Challenge_GetTierCount( challenge )
		int activeTier       = Challenge_GetCurrentTier( GetLocalClientPlayer(), challenge )
		if ( Challenge_IsComplete( GetLocalClientPlayer(), challenge ) )
			activeTier = tierCount - 1 //
		int challengeProgress = Challenge_GetProgressValue( GetLocalClientPlayer(), challenge, activeTier )
		int challengeGoal     = Challenge_GetGoalVal( challenge, activeTier )

		ItemFlavorBag challengeItemRewards = Challenge_GetItemRewards( challenge, activeTier )
		ItemFlavor ornull singleReward     = challengeItemRewards.flavors.len() == 1 ? challengeItemRewards.flavors[0] : null

		if ( rui != null )
		{
			RuiSetString( rui, "challengeText" + suffix, Challenge_GetDescription( challenge, activeTier ) )
			RuiSetInt( rui, "challengeProgress" + suffix, challengeProgress )
			RuiSetInt( rui, "challengeGoal" + suffix, challengeGoal )
			RuiSetString( rui, "rewardString" + suffix, Localize( "#CHALLENGE_XP_REWARD_STRING", Challenge_GetXPReward( challenge, activeTier ) ) )
			RuiSetInt( rui, "tierCount" + suffix, tierCount )
			RuiSetInt( rui, "activeTier" + suffix, activeTier )

			if ( singleReward != null )
			{
				expect ItemFlavor(singleReward)
				asset rewardIcon = $""
				if ( ItemFlavor_GetType( singleReward ) == eItemType.character_skin )
				{
					ItemFlavor character = CharacterSkin_GetCharacterFlavor( singleReward )
					rewardIcon = ItemFlavor_GetIcon( character )
					RuiSetInt( rui, "tempRewardIconMode", 1 )
				}
				else if ( ItemFlavor_GetType( singleReward ) == eItemType.weapon_skin )
				{
					ItemFlavor weapon = WeaponSkin_GetWeaponFlavor( singleReward )
					//
					rewardIcon = GetWeaponInfoFileKeyFieldAsset_Global( WeaponItemFlavor_GetClassname( weapon ), "hud_icon" )
					RuiSetInt( rui, "tempRewardIconMode", 2 )
				}
				else if ( ItemFlavor_GetAsset( singleReward ) == $"settings/itemflav/gcard_badge/account/beasthunter_event.rpak" )
				{
					//
					rewardIcon = $"rui/menu/buttons/battlepass/badge"
					RuiSetInt( rui, "tempRewardIconMode", 3 )
				}
				RuiSetImage( rui, "rewardIcon", rewardIcon )
				RuiSetFloat3( rui, "rewardIconCol", GetKeyColor( COLORID_TEXT_LOOT_TIER0, ItemFlavor_GetQuality( singleReward ) + 1 ) / 255.0 )
			}
			else
			{
				RuiSetInt( rui, "tempRewardIconMode", 0 )
			}
		}

		#if(UI)
			if ( button != null )
			{
				Hud_Show( button )
				if ( button in WORKAROUND_challengeButtonToClickHandlerMap )
				{
					Hud_RemoveEventHandler( button, UIE_CLICK, WORKAROUND_challengeButtonToClickHandlerMap[button] )
					delete WORKAROUND_challengeButtonToClickHandlerMap[button]
				}
				Hud_ClearToolTipData( button )

				if ( singleReward != null && InspectItemTypePresentationSupported( expect ItemFlavor(singleReward) ) )
				{
					expect ItemFlavor(singleReward)
					void functionref(var) clickHandler = (void function( var button ) : ( challenge, activeTier, singleReward ) {
						SetChallengeRewardPresentationModeActive( singleReward,
							"#CHALLENGE_REWARD",
							Challenge_GetDescription( challenge, activeTier ) )
					})
					Hud_AddEventHandler( button, UIE_CLICK, clickHandler )
					WORKAROUND_challengeButtonToClickHandlerMap[button] <- clickHandler

					ToolTipData toolTipData
					//
					toolTipData.tooltipStyle = eTooltipStyle.BUTTON_PROMPT
					toolTipData.actionHint1 = "#VIEW_REWARD_TOOLTIP"
					Hud_SetToolTipData( button, toolTipData )
				}
			}
		#endif
	}

	return (displayChallenges.len() > 0)
}
#endif


#if CLIENT || UI 
string function Challenge_GetDescription( ItemFlavor challenge, int tier )
{
	Assert( tier >= 0 && tier < Challenge_GetTierCount( challenge ) )

	int challengeGoal      = Challenge_GetGoalVal( challenge, tier )
	var tierData           = Challenge_GetTierDataBlock( challenge, tier )
	string tierDescription = GetSettingsBlockString( tierData, "description" )

	ItemFlavor ornull character = Challenge_GetCharacterOrNull( challenge, tier )
	if ( character != null )
	{
		return Localize( tierDescription, challengeGoal, Localize( ItemFlavor_GetLongName( expect ItemFlavor( character ) ) ) )
	}

	#if(false)



#endif

	return Localize( tierDescription, challengeGoal )
}
#endif


#if CLIENT || UI 
bool function DoesPlayerHaveChallenge( entity player, ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.challenge )

	PlayerChallengesState pcs = GetPlayerChallengesState( player )
	return (flavor in pcs.challengeStateMap)
}
#endif


#if(false)







//

























//
//
//
//
//




//
//
//






//





//


//




//












//
//



//





#endif


#if CLIENT || UI 
bool function IsChallengeTierComplete( entity player, ItemFlavor challenge, int tier )
{
	Assert( tier >= 0 && tier < Challenge_GetTierCount( challenge ) )

	int goalVal  = Challenge_GetGoalVal( challenge, tier )
	int progress = Challenge_GetProgressValue( player, challenge, tier )
	return progress >= goalVal
}
#endif


#if(false)




//

//


























#endif


#if CLIENT || UI 
array<ItemFlavor> function GetAllChallenges()
{
	return clone GetAllItemFlavorsOfType( eItemType.challenge )
}
#endif


#if CLIENT || UI 
array<ItemFlavor> function GetAllChallengesOfTimespan( int timeSpan )
{
	array<ItemFlavor> results
	foreach( ItemFlavor challenge in GetAllChallenges() )
	{
		if ( Challenge_GetTimeSpanKind( challenge ) == timeSpan )
			results.append( challenge )
	}
	return results
}
#endif


#if CLIENT || UI 
int function Challenge_GetCurrentTier( entity player, ItemFlavor flavor )
{
	#if(DEV)
		if ( DEV_ShouldIgnorePersistence() )
			return 0
	#endif
	//
	PlayerChallengesState pcs = GetPlayerChallengesState( player )
	Assert( flavor in pcs.challengeStateMap, "Called Challenge_GetCurrentTier for challenge " + ItemFlavor_GetHumanReadableRef( flavor ) + " but it was not assigned to the player " + string(player) )
	ChallengeState cs = pcs.challengeStateMap[flavor]
	return player.GetPersistentVarAsInt( "challenges[" + cs.persistenceIdx + "].currentTier" )
}
#endif


#if CLIENT || UI 
bool function Challenge_IsComplete( entity player, ItemFlavor flavor )
{
	int currentTier = Challenge_GetCurrentTier( player, flavor )
	int tierCount   = Challenge_GetTierCount( flavor )
	Assert( currentTier <= tierCount )
	return (currentTier == tierCount)
}
#endif


#if CLIENT || UI 
int function Challenge_GetTierCount( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.challenge )

	var settingsBlock = GetSettingsBlockForAsset( ItemFlavor_GetAsset( flavor ) )
	return GetSettingsArraySize( GetSettingsBlockArray( settingsBlock, "tiers" ) )
}
#endif


#if CLIENT || UI 
int function Challenge_GetTimeSpanKind( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.challenge )

	string key = GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "timeSpan" )
	Assert( key in eChallengeTimeSpanKind, format( "Challenge %s has invalid time span kind: %s", string(ItemFlavor_GetAsset( flavor )), key ) )
	return eChallengeTimeSpanKind[key]
}
#endif


#if CLIENT || UI 
bool function Challenge_IsSingleMatch( ItemFlavor flavor, int tier )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.challenge )
	Assert( tier >= 0 && tier < Challenge_GetTierCount( flavor ) )

	var tierData = Challenge_GetTierDataBlock( flavor, tier )
	return GetSettingsBlockBool( tierData, "inSingleMatch" )
}
#endif


#if CLIENT || UI 
ItemFlavor ornull function Challenge_GetCharacterOrNull( ItemFlavor flavor, int tier )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.challenge )
	Assert( tier >= 0 && tier < Challenge_GetTierCount( flavor ) )

	var tierData = Challenge_GetTierDataBlock( flavor, tier )

	asset characterAsset = GetSettingsBlockAsset( tierData, "character" )

	if ( characterAsset != $"" && IsValidItemFlavorSettingsAsset( characterAsset ) )
		return GetItemFlavorByAsset( characterAsset )

	return null
}
#endif


#if CLIENT || UI 
int function Challenge_GetGoalVal( ItemFlavor flavor, int tier )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.challenge )
	Assert( tier >= 0 && tier < Challenge_GetTierCount( flavor ) )

	var tierData = Challenge_GetTierDataBlock( flavor, tier )
	return GetSettingsBlockInt( tierData, "goalVal" )
}
#endif


#if CLIENT || UI 
int function Challenge_GetXPReward( ItemFlavor flavor, int tier )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.challenge )
	Assert( tier >= 0 && tier < Challenge_GetTierCount( flavor ) )

	var tierData = Challenge_GetTierDataBlock( flavor, tier )
	return GetSettingsBlockInt( tierData, "xpReward" )
}
#endif


#if CLIENT || UI 
int function Challenge_GetBattlepassLevelsReward( ItemFlavor flavor, int tier )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.challenge )
	Assert( tier >= 0 && tier < Challenge_GetTierCount( flavor ) )

	var tierData = Challenge_GetTierDataBlock( flavor, tier )
	return GetSettingsBlockInt( tierData, "bpLevelsReward" )
}
#endif


#if CLIENT || UI 
ItemFlavorBag function Challenge_GetItemRewards( ItemFlavor flavor, int tier )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.challenge )
	Assert( tier >= 0 && tier < Challenge_GetTierCount( flavor ) )

	var tierData = Challenge_GetTierDataBlock( flavor, tier )

	ItemFlavorBag rewards
	foreach ( int rewardIdx, var rewardData in IterateSettingsArray( GetSettingsBlockArray( tierData, "itemRewards" ) ) )
	{
		asset rewardAsset = GetSettingsBlockAsset( rewardData, "flavor" )
		if ( !IsValidItemFlavorSettingsAsset( rewardAsset ) )
		{
			Warning( "Skipping item reward #%d of challenge '%s' because the asset is not a valid itemflavor: '%s'", rewardIdx, ItemFlavor_GetHumanReadableRef( flavor ), string(rewardAsset) )
			continue
		}

		rewards.flavors.append( GetItemFlavorByAsset( rewardAsset ) )
		rewards.quantities.append( GetSettingsBlockInt( rewardData, "quantity" ) )
	}
	return rewards
}
#endif


#if CLIENT || UI 
int function CharacterClass_GetTimeSpan( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.challenge )

	return eChallengeTimeSpanKind[GetGlobalSettingsString( ItemFlavor_GetAsset( flavor ), "timeSpan" )]
}
#endif


#if CLIENT || UI 
int function Challenge_GetProgressValue( entity player, ItemFlavor challengeFlav, int tier )
{
	Assert( ItemFlavor_GetType( challengeFlav ) == eItemType.challenge )
	Assert( tier >= 0 && tier < Challenge_GetTierCount( challengeFlav ) )

	#if(DEV)
		if ( DEV_ShouldIgnorePersistence() )
			return 0
	#endif

	PlayerChallengesState pcs = GetPlayerChallengesState( player )
	Assert( challengeFlav in pcs.challengeStateMap, "Called Challenge_GetActiveTier for challenge " + ItemFlavor_GetHumanReadableRef( challengeFlav ) + " but it was not assigned to the player " + player )
	ChallengeState cs = pcs.challengeStateMap[challengeFlav]

	string statRef = Challenge_GetStatRef( challengeFlav, tier )
	Assert( IsValidStatEntryRef( statRef ) )

	StatEntry entry = GetStatEntryByRef( statRef )
	Assert( entry.type == eStatType.INT )

	int current = GetStat_Int( player, entry, eStatGetWhen.CURRENT )
	int goalVal = Challenge_GetGoalVal( challengeFlav, tier )
	int marker  = player.GetPersistentVarAsInt( "challenges[" + cs.persistenceIdx + "].statMarker" )

	if ( marker < 0 )
		return 0

	int progress = current - marker

	if ( progress < 0 )
		return 0

	if ( progress > goalVal )
		return goalVal

	return progress
}
#endif


#if CLIENT || UI 
var function Challenge_GetTierDataBlock( ItemFlavor flavor, int tier )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.challenge )
	Assert( tier >= 0 && tier < Challenge_GetTierCount( flavor ) )

	var settingsBlock      = GetSettingsBlockForAsset( ItemFlavor_GetAsset( flavor ) )
	var tierDataBlockArray = GetSettingsBlockArray( settingsBlock, "tiers" )

	return GetSettingsArrayElem( tierDataBlockArray, tier )
}
#endif


#if CLIENT || UI 
string function Challenge_GetStatRef( ItemFlavor flavor, int tier )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.challenge )
	Assert( tier >= 0 && tier < Challenge_GetTierCount( flavor ) )

	var tierData = Challenge_GetTierDataBlock( flavor, tier )

	string statRef = GetSettingsBlockString( tierData, "statRef" )

	ItemFlavor ornull character = Challenge_GetCharacterOrNull( flavor, tier )
	if ( character != null )
		statRef = StringReplace( statRef, "%char%", ItemFlavor_GetGUIDString( expect ItemFlavor( character ) ) )

	return statRef
}
#endif


#if CLIENT || UI 
bool function Challenge_ShouldUseStatMarker( ItemFlavor flavor, int tier )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.challenge )
	Assert( tier >= 0 && tier < Challenge_GetTierCount( flavor ) )

	var tierData = Challenge_GetTierDataBlock( flavor, tier )

	return GetSettingsBlockBool( tierData, "useStatMarker" )
}
#endif


#if(false)








#endif


#if CLIENT || UI 
bool function Challenge_IsPremium( ItemFlavor flavor )
{
	Assert( ItemFlavor_GetType( flavor ) == eItemType.challenge )

	return GetGlobalSettingsBool( ItemFlavor_GetAsset( flavor ), "isPremium" )
}
#endif


#if(UI)
ChallengeGroupData function CreateChallengeGroup( string nameString, array<ItemFlavor> challenges )
{
	ChallengeGroupData group
	group.groupName = nameString
	group.challenges = challenges
	group.completedChallenges = GetCompletedChallengeCount( GetUIPlayer(), challenges )
	return group
}
#endif


#if CLIENT || UI 
int function GetCompletedChallengeCount( entity player, array<ItemFlavor> challenges )
{
	int count = 0

	foreach( ItemFlavor challenge in challenges )
	{
		int maxTier = Challenge_GetTierCount( challenge ) - 1
		Assert( maxTier >= 0 )
		if ( IsChallengeTierComplete( player, challenge, maxTier ) )
			count++
	}

	return count
}
#endif




#endif //