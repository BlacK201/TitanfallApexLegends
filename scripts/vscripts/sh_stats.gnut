//


global function ShStats_LevelInit

#if CLIENT || UI 
global function GetCurrentStatSeasonRefOrNull
#endif

#if(false)


























//

//

//


//



//



//



//




//





//





//




//


#endif

#if(false)

#endif



//
//
//
//
//

#if CLIENT || UI 
global struct CareerStats
{
	StatTemplate& account_level
	StatTemplate& total_legendary_items
	StatTemplate& num_characters_with_banners_once_filled
	StatTemplate& respawn_dev
	StatTemplate& ea_access_member
	StatTemplate& fashionista
	StatTemplate& weapons_with_legendary_skin
	StatTemplate& well_rounded
	StatTemplate& times_fully_kitted
	StatTemplate& distance_kill
	StatTemplate& placements_win_with_friends
	StatTemplate& placements_win_with_no_witnessess
	StatTemplate& placements_win_with_min_executions_per_person
	StatTemplate& team_work_kill_count
	StatTemplate& max_placement_win_streak_with_premade_squad
	StatTemplate& looted_all_launch_loot_once
	StatTemplate& master_of_all
	StatTemplate& starter_pack
	StatTemplate& founder_pack
	StatTemplate& twitch_pack
	StatTemplate& daily_challenges_completed
	StatTemplate& challenge_xp_earned

	//
	//
	//
	StatTemplate& looted_all_nongold_weapons_in_1_match

	StatTemplate& dooms
	StatTemplate& kills
	StatTemplate& times_got_doomed
	StatTemplate& deaths
	//
	//
	//
	StatTemplate& winning_kills
	StatTemplate& kills_while_killleader
	StatTemplate& damage_done
	StatTemplate& damage_taken
	StatTemplate& shots
	StatTemplate& hits
	StatTemplate& headshots
	StatTemplate& executions
	StatTemplate& revived_ally
	StatTemplate& games_played
	StatTemplate& placements_win
	StatTemplate& placements_win_with_squad_alive
	StatTemplate& placements_top_3
	StatTemplate& neutral_airdrops_looted
	//
	StatTemplate& weapon_kills
	StatTemplate& weapon_damage_done
	StatTemplate& weapon_shots
	StatTemplate& weapon_hits
	StatTemplate& weapon_headshots
	StatTemplate& character_kills
	StatTemplate& character_dooms
	StatTemplate& character_deaths
	StatTemplate& character_winning_kills
	StatTemplate& character_kills_while_killleader
	StatTemplate& character_damage_done
	StatTemplate& character_damage_done_max_single_game
	StatTemplate& character_shots
	StatTemplate& character_hits
	StatTemplate& character_headshots
	StatTemplate& character_executions
	StatTemplate& character_revived_ally
	StatTemplate& character_games_played
	StatTemplate& character_games_with_5_kills
	StatTemplate& character_games_with_20_kills
	StatTemplate& character_most_squad_squad_kills_in_1_game
	StatTemplate& character_placements_win
	StatTemplate& character_placements_win_with_squad_alive
	StatTemplate& character_placements_top_3
	StatTemplate& character_placements_win_with_friends
	StatTemplate& character_placements_win_as_jumpmaster
	StatTemplate& character_placements_win_as_killleader
	StatTemplate& character_placements_win_as_killleader_and_champion
	StatTemplate& character_placements_win_flawless_1
	StatTemplate& character_placements_win_flawless_2
	StatTemplate& character_placements_win_with_5_headshots
	StatTemplate& character_won_last_game
	StatTemplate& character_hot_streaks
	StatTemplate& character_games_with_respawning_both_teammates
	StatTemplate& character_rapid_eliminations
	StatTemplate& character_reinforcement_recalls
	StatTemplate& character_banner_once_filled

	StatTemplate& character_most_wins_in_24h
	StatTemplate& character_neutral_airdrops_looted
	//
	StatTemplate& character_weapon_kills
	StatTemplate& character_weapon_damage_done
	StatTemplate& character_weapon_shots
	StatTemplate& character_weapon_hits
	StatTemplate& character_weapon_headshots
	StatTemplate& character_weaponcategory_kills
	StatTemplate& character_weaponcategory_damage_done
	StatTemplate& character_weaponcategory_shots
	StatTemplate& character_weaponcategory_hits
	StatTemplate& character_weaponcategory_headshots

	StatTemplate& weaponcategory_kills
	StatTemplate& weaponcategory_damage_done
	StatTemplate& weaponcategory_headshots

	//
	StatTemplate& times_jumpmaster
	StatTemplate& times_jumpmaster_post_fix //
	StatTemplate& valentines_revives_and_respawns
	//

	StatTemplate& bangalore_passive_distance
	StatTemplate& bangalore_tactical_smoke_hits
	StatTemplate& bangalore_ultimate_damage_done

	//
	StatTemplate& bloodhound_tactical_enemies_detected
	StatTemplate& bloodhound_tactical_traps_detected
	StatTemplate& bloodhound_ultimate_kills_while_active

	//
	StatTemplate& caustic_tactical_barrels_traps_detonated
	StatTemplate& caustic_gas_damage_dealt
	StatTemplate& caustic_passive_enemies_in_gas_killed

	//
	StatTemplate& gibraltar_tactical_bubble_enemy_damage_absorbed
	StatTemplate& gibraltar_ultimate_bombardment_kills
	StatTemplate& gibraltar_passive_gunshield_enemy_damage_absorbed

	//
	StatTemplate& lifeline_tactical_drone_healing_given
	StatTemplate& lifeline_ultimate_droppod_items_grabbed_by_allies
	StatTemplate& lifeline_passive_enemy_damage_absorbed

	//
	StatTemplate& mirage_decoys_created
	StatTemplate& mirage_successful_bamboozles
	StatTemplate& mirage_successful_revives

	//
	StatTemplate& octane_stim_distance_traveled
	StatTemplate& octane_jump_pad_allies_launched
	StatTemplate& octane_passive_health_regenerated

	//
	StatTemplate& pathfinder_tactical_meters_moved_by_grapple
	StatTemplate& pathfinder_ultimate_ziplines_used_by_allies
	StatTemplate& pathfinder_passive_beacons_scanned

	#if(false)
//



#endif

	//
	StatTemplate& wraith_ultimate_phase_tunnel_ally_uses
	StatTemplate& wraith_passive_voices_heard
	StatTemplate& wraith_tactical_time_spent_in_phase

	//
	StatTemplate& season_battlepass_level
	StatTemplate& season_character_damage_done
	StatTemplate& season_character_kills
	StatTemplate& season_character_placements_win
	StatTemplate& season_character_placements_top_5
	StatTemplate& season_character_battlepass_bonus_xp
	StatTemplate& season_kills_with_7_characters
	StatTemplate& season_placements_wins_with_7_characters
	StatTemplate& season_placements_top_5_with_7_characters
	StatTemplate& season_battlepass_bonus_xp_with_7_characters

	#if(true)
		//
		StatTemplate& elite_badge_unlock
		StatTemplate& elite_888_badge_unlock
		StatTemplate& character_elite_game_wins
		StatTemplate& character_elite_game_8kill_wins
		StatTemplate& season_elite_current_streak
		StatTemplate& season_elite_max_streak
		StatTemplate& season_character_elite_game_wins
		StatTemplate& season_character_elite_games_played
		StatTemplate& season_character_elite_kills
	#endif

	#if(false)
//





#endif

	StatTemplate& season01_event_placements_top_5
	#if(true)
		StatTemplate& season01_event_elite_placements_top_5
	#endif
	StatTemplate& season01_event_placements_win
	StatTemplate& season01_event_bp_premium_lvl
}
global struct MatchStats
{
	//
}
#endif

#if CLIENT || UI 
global CareerStats CAREER_STATS//
global MatchStats MATCH_STATS//
#endif


#if(false)






















#endif


//
//
//
//
//
#if CLIENT || UI 
struct FileStruct_LifetimeLevel
{
	table<string, table<string, bool> > weaponStatCategoryWeaponItemRefSet

	#if(false)





#endif
}
FileStruct_LifetimeLevel& fileLevel
#endif



//
//
//
//
//
#if CLIENT || UI 
void function ShStats_LevelInit()
{
	#if(CLIENT)
		PIN_Init()
	#endif

	FileStruct_LifetimeLevel newFileLevel
	fileLevel = newFileLevel

	RegisterAllStats()

	#if(false)














#endif

}
#endif


#if CLIENT || UI 
void function RegisterAllStats()
{
	array<string> allCharacterRefs = []
	foreach( ItemFlavor character in GetAllCharacters() )
		allCharacterRefs.append( ItemFlavor_GetGUIDString( character ) )

	array<string> allWeaponsRefs               = []
	array<string> allLootWeaponStatsCategories = []
	foreach( ItemFlavor weapon in GetAllWeaponItemFlavors() )
	{
		string weaponRef = ItemFlavor_GetGUIDString( weapon )
		allWeaponsRefs.append( weaponRef )
		string category = WeaponItemFlavor_GetStatsCategory( weapon )

		bool isGold = (category == WEAPON_STAT_CATEGORY_GOLD_WEAPON)
		#if(false)



#endif

		if ( !(category in fileLevel.weaponStatCategoryWeaponItemRefSet) )
		{
			fileLevel.weaponStatCategoryWeaponItemRefSet[category] <- {}
			allLootWeaponStatsCategories.append( category )
		}
		fileLevel.weaponStatCategoryWeaponItemRefSet[category][weaponRef] <- true
	}

	array<string> allSeasonRefs = []
	foreach( ItemFlavor season in GetAllSeasonFlavors() )
	{
		allSeasonRefs.append( ItemFlavor_GetGUIDString( season ) )
	}

	//
	const int TRACK = eStatFlags.STORE_START_OF_PREVIOUS_MATCH | eStatFlags.PERSISTENCE_WRITE_IMMEDIATELY //
	//
	const int TRACK_CALC_DEPENDS = eStatFlags.PERSISTENCE_WRITE_IMMEDIATELY
	const int BADGES_NEED = eStatFlags.STORE_START_OF_PREVIOUS_MATCH
	const int TRACKERS_NEED = 0//

	CAREER_STATS.account_level = RegisterExpensiveCalculatedStat_Int( null, "account_level", BADGES_NEED, SetupGetAccountLevelForStat, [] )
	CAREER_STATS.total_legendary_items = RegisterCachedCalculatedStat_Int( null, "total_legendary_items", BADGES_NEED, SetupGetTotalLegendaryItemsForStat, [] )
	CAREER_STATS.num_characters_with_banners_once_filled = RegisterCachedCalculatedStat_Int( null, "num_characters_with_banners_once_filled", BADGES_NEED, SetupGetNumCharactersWithBannersOnceFilledForStat, [] )
	CAREER_STATS.ea_access_member = RegisterExpensiveCalculatedStat_Int( null, "ea_access_member", BADGES_NEED, SetupGetEAAccessStatusForStat, [] )
	CAREER_STATS.fashionista = RegisterCachedCalculatedStat_Int( null, "fashionista", BADGES_NEED, SetupGetCountOfCharactersWithLegendarySkinAndExecutionForStat, [] )
	CAREER_STATS.weapons_with_legendary_skin = RegisterCachedCalculatedStat_Int( null, "weapons_with_legendary_skin", BADGES_NEED, SetupGetCountOfWeaponsWithLegendarySkinsForStat, [] )
	CAREER_STATS.well_rounded = RegisterCachedCalculatedStat_Int( null, "well_rounded", BADGES_NEED, SetupGetCountOfCharactersWithWellRoundedDamageForStat, [] )
	CAREER_STATS.looted_all_launch_loot_once = RegisterCachedCalculatedStat_Int( null, "looted_all_launch_loot_once", BADGES_NEED, SetupGetTreasureHunterStatusForStat, [] )
	CAREER_STATS.master_of_all = RegisterCachedCalculatedStat_Int( null, "master_of_all", BADGES_NEED, SetupGetCountOfCharactersWithTenWinsForStat, [] )
	CAREER_STATS.starter_pack = RegisterExpensiveCalculatedStat_Int( null, "starter_pack_owner", BADGES_NEED, SetupGetStarterPackStatusForStat, [] )
	CAREER_STATS.founder_pack = RegisterExpensiveCalculatedStat_Int( null, "founder_pack_owner", BADGES_NEED, SetupGetFounderPackStatusForStat, [] )
	CAREER_STATS.twitch_pack = RegisterExpensiveCalculatedStat_Int( null, "twitch_pack_owner", 0, SetupGetTwitchPackStatusForStat, [] )

	CAREER_STATS.respawn_dev = RegisterAccumulatedStat_Int( null, "respawn_dev", BADGES_NEED )
	CAREER_STATS.times_fully_kitted = RegisterAccumulatedStat_Int( null, "times_fully_kitted", BADGES_NEED )
	CAREER_STATS.distance_kill = RegisterAccumulatedStat_Int( null, "distance_kill", BADGES_NEED )

	//
	//
	CAREER_STATS.times_jumpmaster = RegisterAccumulatedStat_Int( null, "times_jumpmaster" )
	CAREER_STATS.times_jumpmaster_post_fix = RegisterAccumulatedStat_Int( null, "times_jumpmaster_post_fix" )
	CAREER_STATS.looted_all_nongold_weapons_in_1_match = RegisterAccumulatedStat_Bool( null, "looted_all_nongold_weapons_in_1_match" ) //
	CAREER_STATS.valentines_revives_and_respawns = RegisterAccumulatedStat_Int( null, "valentines_revives_and_respawns", BADGES_NEED )

	CAREER_STATS.daily_challenges_completed = RegisterAccumulatedStat_Int( null, "daily_challenges_completed", TRACK )
	CAREER_STATS.challenge_xp_earned = RegisterAccumulatedStat_Int( null, "challenge_xp_earned", TRACK )

	CAREER_STATS.dooms = RegisterAccumulatedStat_Int( null, "dooms", TRACK ) //
	CAREER_STATS.kills = RegisterAccumulatedStat_Int( null, "kills", TRACK ) //
	//
	CAREER_STATS.times_got_doomed = RegisterAccumulatedStat_Int( null, "times_got_doomed" ) //
	CAREER_STATS.deaths = RegisterAccumulatedStat_Int( null, "deaths" ) //
	//
	//
	//
	CAREER_STATS.winning_kills = RegisterAccumulatedStat_Int( null, "winning_kills" ) //
	CAREER_STATS.kills_while_killleader = RegisterAccumulatedStat_Int( null, "kills_while_killleader" )
	CAREER_STATS.damage_done = RegisterAccumulatedStat_Int( null, "damage_done", TRACK ) //
	CAREER_STATS.damage_taken = RegisterAccumulatedStat_Int( null, "damage_taken" ) //
	CAREER_STATS.shots = RegisterAccumulatedStat_Int( null, "shots" ) //
	CAREER_STATS.hits = RegisterAccumulatedStat_Int( null, "hits" ) //
	CAREER_STATS.headshots = RegisterAccumulatedStat_Int( null, "headshots", TRACK ) //
	CAREER_STATS.executions = RegisterAccumulatedStat_Int( null, "executions", TRACK ) //
	CAREER_STATS.revived_ally = RegisterAccumulatedStat_Int( null, "revived_ally" ) //
	CAREER_STATS.games_played = RegisterAccumulatedStat_Int( null, "games_played", TRACK ) //
	CAREER_STATS.placements_win = RegisterAccumulatedStat_Int( null, "placements_win" ) //
	CAREER_STATS.placements_win_with_squad_alive = RegisterAccumulatedStat_Int( null, "placements_win_with_squad_alive" ) //
	CAREER_STATS.placements_top_3 = RegisterAccumulatedStat_Int( null, "placements_top_3", TRACK ) //
	CAREER_STATS.placements_win_with_friends = RegisterAccumulatedStat_Int( null, "placements_win_with_friends", BADGES_NEED )
	CAREER_STATS.placements_win_with_no_witnessess = RegisterAccumulatedStat_Int( null, "placements_win_with_no_witnessess", BADGES_NEED )
	CAREER_STATS.placements_win_with_min_executions_per_person = RegisterAccumulatedStat_Int( null, "placements_win_with_min_executions_per_person", BADGES_NEED )
	CAREER_STATS.max_placement_win_streak_with_premade_squad = RegisterAccumulatedStat_Int( null, "max_placement_win_streak_with_premade_squad", BADGES_NEED )
	CAREER_STATS.team_work_kill_count = RegisterAccumulatedStat_Int( null, "team_work_kill_count", BADGES_NEED )
	CAREER_STATS.neutral_airdrops_looted = RegisterAccumulatedStat_Int( null, "neutral_airdrops_looted", TRACK )
	//

	StatEnumStruct weapon_SES = RegisterStatEnumStruct( null, "weapons", "eWeaponFlavor", allWeaponsRefs ) //
	CAREER_STATS.weapon_kills = RegisterAccumulatedStat_Int( weapon_SES, "kills" ) //
	CAREER_STATS.weapon_damage_done = RegisterAccumulatedStat_Int( weapon_SES, "damage_done" ) //
	CAREER_STATS.weapon_shots = RegisterAccumulatedStat_Int( weapon_SES, "shots" ) //
	CAREER_STATS.weapon_hits = RegisterAccumulatedStat_Int( weapon_SES, "hits" ) //
	CAREER_STATS.weapon_headshots = RegisterAccumulatedStat_Int( weapon_SES, "headshots" ) //

	StatEnumStruct character_SES = RegisterStatEnumStruct( null, "characters", "eCharacterFlavor", allCharacterRefs )
	CAREER_STATS.character_kills = RegisterAccumulatedStat_Int( character_SES, "kills", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.character_dooms = RegisterAccumulatedStat_Int( character_SES, "dooms", TRACK ) //
	CAREER_STATS.character_deaths = RegisterAccumulatedStat_Int( character_SES, "deaths" ) //
	CAREER_STATS.character_winning_kills = RegisterAccumulatedStat_Int( character_SES, "winning_kills", BADGES_NEED | TRACKERS_NEED ) //
	CAREER_STATS.character_kills_while_killleader = RegisterAccumulatedStat_Int( character_SES, "kills_while_killleader", TRACKERS_NEED )
	CAREER_STATS.character_damage_done = RegisterAccumulatedStat_Int( character_SES, "damage_done", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.character_damage_done_max_single_game = RegisterAccumulatedStat_Int( character_SES, "character_damage_done_max_single_game", BADGES_NEED ) //
	CAREER_STATS.character_shots = RegisterAccumulatedStat_Int( character_SES, "shots" ) //
	CAREER_STATS.character_hits = RegisterAccumulatedStat_Int( character_SES, "hits" ) //
	CAREER_STATS.character_headshots = RegisterAccumulatedStat_Int( character_SES, "headshots", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.character_executions = RegisterAccumulatedStat_Int( character_SES, "executions", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.character_revived_ally = RegisterAccumulatedStat_Int( character_SES, "revived_ally", TRACKERS_NEED ) //
	CAREER_STATS.character_games_played = RegisterAccumulatedStat_Int( character_SES, "games_played", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.character_games_with_5_kills = RegisterAccumulatedStat_Int( character_SES, "games_with_5_kills", BADGES_NEED ) //
	CAREER_STATS.character_games_with_20_kills = RegisterAccumulatedStat_Int( character_SES, "games_with_20_kills", BADGES_NEED ) //
	CAREER_STATS.character_games_with_respawning_both_teammates = RegisterAccumulatedStat_Int( character_SES, "character_games_with_respawning_both_teammates", BADGES_NEED ) //
	CAREER_STATS.character_rapid_eliminations = RegisterAccumulatedStat_Int( character_SES, "character_rapid_eliminations", BADGES_NEED ) //
	CAREER_STATS.character_most_squad_squad_kills_in_1_game = RegisterAccumulatedStat_Int( character_SES, "most_squad_squad_kills_in_1_game", BADGES_NEED )
	CAREER_STATS.character_placements_win = RegisterAccumulatedStat_Int( character_SES, "placements_win", BADGES_NEED ) //
	CAREER_STATS.character_placements_win_with_squad_alive = RegisterAccumulatedStat_Int( character_SES, "placements_win_with_squad_alive", BADGES_NEED | TRACKERS_NEED ) //
	CAREER_STATS.character_placements_top_3 = RegisterAccumulatedStat_Int( character_SES, "placements_top_3", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.character_placements_win_as_jumpmaster = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_as_jumpmaster", BADGES_NEED ) //
	CAREER_STATS.character_placements_win_as_killleader = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_as_killleader", BADGES_NEED ) //
	CAREER_STATS.character_placements_win_as_killleader_and_champion = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_as_killleader_and_champion", BADGES_NEED ) //
	CAREER_STATS.character_placements_win_flawless_1 = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_flawless_1", BADGES_NEED ) //
	CAREER_STATS.character_placements_win_flawless_2 = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_flawless_2", BADGES_NEED ) //
	CAREER_STATS.character_placements_win_with_5_headshots = RegisterAccumulatedStat_Int( character_SES, "character_placements_win_with_5_headshots", BADGES_NEED ) //
	//
	CAREER_STATS.character_won_last_game = RegisterVariableStat_Bool( character_SES, "character_won_last_game" ) //
	CAREER_STATS.character_hot_streaks = RegisterAccumulatedStat_Int( character_SES, "character_hot_streaks", BADGES_NEED ) //
	CAREER_STATS.character_reinforcement_recalls = RegisterAccumulatedStat_Int( character_SES, "character_reinforcement_recalls", BADGES_NEED ) //
	CAREER_STATS.character_banner_once_filled = RegisterAccumulatedStat_Bool( character_SES, "character_banner_once_filled" ) //

	//
	CAREER_STATS.character_neutral_airdrops_looted = RegisterAccumulatedStat_Int( character_SES, "neutral_airdrops_looted" )
	//

	StatEnumStruct character_weapon_SES = RegisterStatEnumStruct( character_SES, "weapons", "eWeaponFlavor", allWeaponsRefs ) //
	CAREER_STATS.character_weapon_kills = RegisterAccumulatedStat_Int( character_weapon_SES, "kills", TRACKERS_NEED | TRACK_CALC_DEPENDS ) //
	CAREER_STATS.character_weapon_damage_done = RegisterAccumulatedStat_Int( character_weapon_SES, "damage_done", TRACK_CALC_DEPENDS ) //
	CAREER_STATS.character_weapon_shots = RegisterAccumulatedStat_Int( character_weapon_SES, "shots" ) //
	CAREER_STATS.character_weapon_hits = RegisterAccumulatedStat_Int( character_weapon_SES, "hits" ) //
	CAREER_STATS.character_weapon_headshots = RegisterAccumulatedStat_Int( character_weapon_SES, "headshots", TRACK_CALC_DEPENDS ) //

	StatEnumStruct character_weaponcategory_SES = RegisterStatEnumStruct( character_SES, "weaponcategories", "eWeaponStatCategory", allLootWeaponStatsCategories )

	StatTemplate temp_var_until_R5DEV_35088_is_fixed

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_kills
	CAREER_STATS.character_weaponcategory_kills = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "kills", TRACK_CALC_DEPENDS,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_damage_done
	CAREER_STATS.character_weaponcategory_damage_done = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "damage_done", TRACK_CALC_DEPENDS,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_shots
	CAREER_STATS.character_weaponcategory_shots = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "shots", 0,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_hits
	CAREER_STATS.character_weaponcategory_hits = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "hits", 0,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_headshots
	CAREER_STATS.character_weaponcategory_headshots = RegisterExpensiveCalculatedStat_Int( character_weaponcategory_SES, "headshots", TRACK_CALC_DEPENDS,
		SetupCharacterWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //


	StatEnumStruct weaponcategory_SES = RegisterStatEnumStruct( null, "weaponcategories", "eWeaponStatCategory", allLootWeaponStatsCategories )

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_kills
	CAREER_STATS.weaponcategory_kills = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "kills", TRACK,
		SetupWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_damage_done
	CAREER_STATS.weaponcategory_damage_done = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "damage_done", TRACK,
		SetupWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //

	temp_var_until_R5DEV_35088_is_fixed = CAREER_STATS.character_weapon_headshots
	CAREER_STATS.weaponcategory_headshots = RegisterExpensiveCalculatedStat_Int( weaponcategory_SES, "headshots", TRACK,
		SetupWeaponCategoryStatSumEntryFunc_Int, [temp_var_until_R5DEV_35088_is_fixed] ) //


	CAREER_STATS.bloodhound_tactical_enemies_detected = RegisterAccumulatedStat_Int( null, "bloodhound_tactical_enemies_detected", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.bloodhound_tactical_traps_detected = RegisterAccumulatedStat_Int( null, "bloodhound_tactical_traps_detected", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.bloodhound_ultimate_kills_while_active = RegisterAccumulatedStat_Int( null, "bloodhound_ultimate_kills_while_active", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.caustic_tactical_barrels_traps_detonated = RegisterAccumulatedStat_Int( null, "caustic_tactical_barrels_traps_detonated", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.caustic_gas_damage_dealt = RegisterAccumulatedStat_Int( null, "caustic_gas_damage_dealt", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.caustic_passive_enemies_in_gas_killed = RegisterAccumulatedStat_Int( null, "caustic_passive_enemies_in_gas_killed", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.gibraltar_tactical_bubble_enemy_damage_absorbed = RegisterAccumulatedStat_Int( null, "gibraltar_tactical_bubble_enemy_damage_absorbed", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.gibraltar_ultimate_bombardment_kills = RegisterAccumulatedStat_Int( null, "gibraltar_ultimate_bombardment_kills", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.gibraltar_passive_gunshield_enemy_damage_absorbed = RegisterAccumulatedStat_Int( null, "gibraltar_passive_gunshield_enemy_damage_absorbed", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.lifeline_tactical_drone_healing_given = RegisterAccumulatedStat_Int( null, "lifeline_tactical_drone_healing_given", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.lifeline_ultimate_droppod_items_grabbed_by_allies = RegisterAccumulatedStat_Int( null, "lifeline_ultimate_droppod_items_grabbed_by_allies", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.lifeline_passive_enemy_damage_absorbed = RegisterAccumulatedStat_Int( null, "lifeline_passive_enemy_damage_absorbed", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.mirage_decoys_created = RegisterAccumulatedStat_Int( null, "mirage_decoys_created", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.mirage_successful_bamboozles = RegisterAccumulatedStat_Int( null, "mirage_successful_bamboozles", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.mirage_successful_revives = RegisterAccumulatedStat_Int( null, "mirage_successful_revives", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.octane_stim_distance_traveled = RegisterAccumulatedStat_Float( null, "octane_stim_distance_traveled", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.octane_jump_pad_allies_launched = RegisterAccumulatedStat_Int( null, "octane_jump_pad_allies_launched", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.octane_passive_health_regenerated = RegisterAccumulatedStat_Int( null, "octane_passive_health_regenerated", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.pathfinder_tactical_meters_moved_by_grapple = RegisterAccumulatedStat_Float( null, "pathfinder_tactical_meters_moved_by_grapple", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.pathfinder_ultimate_ziplines_used_by_allies = RegisterAccumulatedStat_Int( null, "pathfinder_ultimate_ziplines_used_by_allies", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.pathfinder_passive_beacons_scanned = RegisterAccumulatedStat_Int( null, "pathfinder_passive_beacons_scanned", TRACKERS_NEED | TRACK ) //
	#if(false)
//
//
//
#endif
	CAREER_STATS.wraith_ultimate_phase_tunnel_ally_uses = RegisterAccumulatedStat_Int( null, "wraith_ultimate_phase_tunnel_ally_uses", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.wraith_passive_voices_heard = RegisterAccumulatedStat_Int( null, "wraith_passive_voices_heard", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.wraith_tactical_time_spent_in_phase = RegisterAccumulatedStat_Float( null, "wraith_tactical_time_spent_in_phase", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.bangalore_passive_distance = RegisterAccumulatedStat_Int( null, "bangalore_passive_distance", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.bangalore_tactical_smoke_hits = RegisterAccumulatedStat_Int( null, "bangalore_tactical_smoke_hits", TRACKERS_NEED | TRACK ) //
	CAREER_STATS.bangalore_ultimate_damage_done = RegisterAccumulatedStat_Int( null, "bangalore_ultimate_damage_done", TRACKERS_NEED | TRACK ) //

	StatEnumStruct season_SES = RegisterStatEnumStruct( null, "seasons", "eSeasonFlavor", allSeasonRefs )
	CAREER_STATS.season_battlepass_level = RegisterCachedCalculatedStat_Int( season_SES, "battlepass_level", BADGES_NEED, SetupGetSeasonBattlePassLevelForStat, [] ) //

	StatEnumStruct season_character_SES = RegisterStatEnumStruct( season_SES, "characters", "eCharacterFlavor", allCharacterRefs )
	CAREER_STATS.season_character_damage_done = RegisterAccumulatedStat_Int( season_character_SES, "damage_done", TRACKERS_NEED ) //
	CAREER_STATS.season_character_kills = RegisterAccumulatedStat_Int( season_character_SES, "kills", TRACKERS_NEED ) //
	CAREER_STATS.season_character_placements_win = RegisterAccumulatedStat_Int( season_character_SES, "placements_win", BADGES_NEED | TRACKERS_NEED ) //
	CAREER_STATS.season_character_placements_top_5 = RegisterAccumulatedStat_Int( season_character_SES, "placements_top_5" ) //
	CAREER_STATS.season_character_battlepass_bonus_xp = RegisterCachedCalculatedStat_Int( season_character_SES, "battlepass_bonus_xp", 0, SetupGetSeasonCharacterBonusXPForStat, [] ) //

	CAREER_STATS.season_kills_with_7_characters = RegisterCachedCalculatedStat_Int( season_SES, "kills_with_7_characters", BADGES_NEED, SetupGetNumKillsWithSevenCharactersForSeason, [] ) //
	CAREER_STATS.season_placements_wins_with_7_characters = RegisterCachedCalculatedStat_Int( season_SES, "placements_wins_with_7_characters", BADGES_NEED, SetupGetNumWinsWithSevenCharactersForSeason, [] ) //
	CAREER_STATS.season_placements_top_5_with_7_characters = RegisterCachedCalculatedStat_Int( season_SES, "placements_top_5_with_7_characters", BADGES_NEED, SetupGetNumTop5WithSevenCharactersForSeason, [] ) //
	CAREER_STATS.season_battlepass_bonus_xp_with_7_characters = RegisterCachedCalculatedStat_Int( season_SES, "battlepass_bonus_xp_with_7_characters", BADGES_NEED, SetupGetNumCharactersWithMilestoneBonusBattlePassXPForSeason, [] ) //

	#if(true)
		CAREER_STATS.elite_badge_unlock = RegisterAccumulatedStat_Int( null, "elite_badge_unlock", BADGES_NEED )
		CAREER_STATS.elite_888_badge_unlock = RegisterExpensiveCalculatedStat_Int( null, "elite_888_badge_unlock", BADGES_NEED, SetupGetElite888StatusForStat, [] )
		CAREER_STATS.character_elite_game_wins = RegisterAccumulatedStat_Int( character_SES, "character_elite_game_wins", BADGES_NEED ) //
		CAREER_STATS.character_elite_game_8kill_wins = RegisterAccumulatedStat_Int( character_SES, "character_elite_game_8kill_wins", BADGES_NEED ) //
		CAREER_STATS.season_elite_current_streak = RegisterVariableStat_Int( season_SES, "elite_current_streak" ) //
		CAREER_STATS.season_elite_max_streak = RegisterAccumulatedStat_Int( season_SES, "elite_max_streak" ) //
		CAREER_STATS.season_character_elite_game_wins = RegisterAccumulatedStat_Int( season_character_SES, "elite_game_wins" )
		CAREER_STATS.season_character_elite_games_played = RegisterAccumulatedStat_Int( season_character_SES, "elite_games_played" )
		CAREER_STATS.season_character_elite_kills = RegisterAccumulatedStat_Int( season_character_SES, "elite_kills" )
	#endif

	#if(false)
//
//
//
//
//
//
#endif

	CAREER_STATS.season01_event_placements_top_5 = RegisterAccumulatedStat_Int( null, "season01_event_placements_top_5", TRACK | BADGES_NEED )
	#if(true)
		CAREER_STATS.season01_event_elite_placements_top_5 = RegisterAccumulatedStat_Int( null, "season01_event_elite_placements_top_5", TRACK )
	#endif
	CAREER_STATS.season01_event_placements_win = RegisterAccumulatedStat_Int( null, "season01_event_placements_win", TRACK )
	CAREER_STATS.season01_event_bp_premium_lvl = RegisterAccumulatedStat_Int( null, "season01_event_bp_premium_lvl", TRACK )
}
#endif


#if(false)




//





#endif



//
//
//
//
//
#if(false)












//





#endif



//
//
//
#if(false)






























//


























































//






//

































































































































































































//











































































//




//























#endif



//
//
//
#if(false)




//




/*










*/




/*


















*/





#endif



//
//
//
#if(false)



































//














































//


//
//
//











//























//




//






//









//
//









//
//
























































//




//



























//

























#endif



//
//
//
#if(false)


























//




//







//










//

























//

//






















//














#endif



//
//
//
#if(false)





























































































































#endif

//
//
//
#if(false)

//


















//




//
//
//
//
//
//
//

//









//






//



//


//









//




//
















//



//













//






























//



//
















//


//

//








//























//





//





//












//












//

















//














//





//
//



































//

















//





//



















//

















//










//


//
















#endif


//
//
//
//
//
#if CLIENT || UI 
StatCalcFuncInfo function SetupGetAccountLevelForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int xpProgress   = GetPlayerAccountXPProgress( ToEHI( player ) )
		int accountLevel = GetAccountLevelForXP( xpProgress )
		return minint( accountLevel, 100 )
	})

	return info
}
#endif


#if CLIENT || UI 
StatCalcFuncInfo function SetupCharacterWeaponCategoryStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplate = sourceTemplates[0]

	StatCalcFuncInfo info

	string calcCharacter      = calcEntry.enumKeys[0]
	string calcWeaponCategory = calcEntry.enumKeys[1]

	foreach( string weaponItemRefInCategory, bool unused in fileLevel.weaponStatCategoryWeaponItemRefSet[calcWeaponCategory] )
	{
		info.sourceEntries.append( ResolveStatEntry( sourceTemplate, calcCharacter, weaponItemRefInCategory ) )
	}

	info.calcFunc_Int = CalcStatSum_Int

	return info
}
#endif


#if CLIENT || UI 
StatCalcFuncInfo function SetupWeaponCategoryStatSumEntryFunc_Int( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatTemplate sourceTemplate = sourceTemplates[0]

	StatCalcFuncInfo info

	string calcWeaponCategory = calcEntry.enumKeys[0]

	foreach( string weaponItemRefInCategory, bool unused in fileLevel.weaponStatCategoryWeaponItemRefSet[calcWeaponCategory] )
	{
		foreach( ItemFlavor character in GetAllCharacters() )
		{
			info.sourceEntries.append( ResolveStatEntry( sourceTemplate, ItemFlavor_GetGUIDString( character ), weaponItemRefInCategory ) )
		}
	}

	info.calcFunc_Int = CalcStatSum_Int

	return info
}
#endif


#if CLIENT || UI 
int function CalcStatSum_Int( entity player, array<StatEntry> sourceEntries, int when )
{
	int sum = 0
	foreach( StatEntry sourceEntry in sourceEntries )
		sum += GetStat_Int( player, sourceEntry, when )
	return sum
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetTotalLegendaryItemsForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		Assert( GRX_IsInventoryReady( player ) )

		int count = 0
		foreach ( ItemFlavor flav in GetAllItemFlavors() )
		{
			if ( ItemFlavor_GetGRXMode( flav ) != eItemFlavorGRXMode.REGULAR )
				continue

			if ( !ItemFlavor_HasQuality( flav ) || ItemFlavor_GetQuality( flav ) < eQuality.LEGENDARY )
				continue

			if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( flav, player ) )
				count++
		}

		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetNumCharactersWithBannersOnceFilledForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		foreach( ItemFlavor character in GetAllCharacters() )
		{
			if ( GetStat_Bool( player, ResolveStatEntry( CAREER_STATS.character_banner_once_filled, ItemFlavor_GetGUIDString( character ) ), when ) )
				count++
		}
		return count
	})

	return info
}
#endif
#if(false)






















#endif
#if(false)



//
















//












#endif


#if CLIENT || UI 
string ornull function GetCurrentStatSeasonRefOrNull()
{
	ItemFlavor ornull season = GetActiveSeason( GetUnixTimestamp() ) //
	if ( season == null )
		return null
	return ItemFlavor_GetGUIDString( expect ItemFlavor(season) )
}
#endif


#if CLIENT || UI 
StatCalcFuncInfo function SetupGetStarterPackStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when )
	{
		return PlayerHasStarterPack( player ) ? 1 : 0
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetFounderPackStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when )
	{
		return PlayerHasFoundersPack( player ) ? 1 : 0
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetTwitchPackStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		#if(false)

#endif
		#if(UI)
			return GetConVarInt( "twitch_prime_linked " ) > 0 ? 1 : 0
		#endif
		#if(CLIENT)
			return GetConVarInt( "twitch_prime_linked " ) > 0 ? 1 : 0
		#endif
	})

	return info
}
#endif


#if CLIENT || UI 
StatCalcFuncInfo function SetupGetEAAccessStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		#if(false)

#endif
		#if(UI)
			return Script_UserHasEAAccess() ? 1 : 0
		#endif
		#if(CLIENT)
			return 1 //
		#endif
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetCountOfCharactersWithLegendarySkinAndExecutionForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		Assert( GRX_IsInventoryReady( player ) )

		int count = 0
		foreach( ItemFlavor character in GetAllCharacters() )
		{
			bool hasLegendarySkin     = false
			bool hasLegendaryFinisher = false

			array<ItemFlavor> characterSkins = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_CharacterSkin( character ) )
			foreach ( skin in characterSkins )
			{
				if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( skin, player ) && ItemFlavor_HasQuality( skin ) && ItemFlavor_GetQuality( skin ) >= eQuality.LEGENDARY )
				{
					hasLegendarySkin = true
					break
				}
			}

			array<ItemFlavor> executions = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_CharacterExecution( character ) )
			foreach ( execution in executions )
			{
				if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( execution, player ) && ItemFlavor_HasQuality( execution ) && ItemFlavor_GetQuality( execution ) >= eQuality.LEGENDARY )
				{
					hasLegendaryFinisher = true
					break
				}
			}

			if ( hasLegendarySkin && hasLegendaryFinisher )
				count++
		}

		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetCountOfWeaponsWithLegendarySkinsForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		Assert( GRX_IsInventoryReady( player ) )

		int count = 0
		foreach( ItemFlavor weapon in GetAllWeaponItemFlavors() )
		{
			array<ItemFlavor> weaponSkins = GetValidItemFlavorsForLoadoutSlot( ToEHI( player ), Loadout_WeaponSkin( weapon ) )
			foreach ( skin in weaponSkins )
			{
				if ( GRX_IsItemOwnedByPlayer_AllowOutOfDateData( skin, player ) && ItemFlavor_HasQuality( skin ) && ItemFlavor_GetQuality( skin ) >= eQuality.LEGENDARY )
				{
					count++
					break
				}
			}
		}
		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetCountOfCharactersWithWellRoundedDamageForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0
		foreach( char in GetAllCharacters() )
		{
			string characterRef = ItemFlavor_GetGUIDString( char )
			int damageDone      = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.character_damage_done, characterRef ), when )
			if ( damageDone > 20000 )
				count++
		}
		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetTreasureHunterStatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		//
		return 0
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetElite888StatusForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0

		foreach( ItemFlavor character in GetAllCharacters() )
		{
			if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.character_elite_game_8kill_wins, ItemFlavor_GetGUIDString( character ) ), when ) >= 1 )
				count++
		}

		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetCountOfCharactersWithTenWinsForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) {
		int count = 0
		foreach( ItemFlavor character in GetAllCharacters() )
		{
			if ( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.character_placements_win, ItemFlavor_GetGUIDString( character ) ), when ) >= 10 )
				count++
		}

		return count
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetSeasonBattlePassLevelForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	string seasonRef = calcEntry.enumKeys[0]

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) : ( seasonRef ) {
		ItemFlavor season = GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( seasonRef ) )
		ItemFlavor pass   = Season_GetBattlePass( season )

		//
		if ( !GRX_IsItemOwnedByPlayer_AllowOutOfDateData( pass, player ) )
			return 0

		return GetPlayerBattlePassLevel( player, pass, false ) + 1
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetSeasonCharacterBonusXPForStat( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	string seasonRef    = calcEntry.enumKeys[0]
	string characterRef = calcEntry.enumKeys[1]

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) : ( seasonRef, characterRef ) {
		return GetPlayerBattlePassCharacterXP( player,
			Season_GetBattlePass( GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( seasonRef ) ) ),
			GetItemFlavorByGUID( ConvertItemFlavorGUIDStringToGUID( characterRef ) ) )
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetNumKillsWithSevenCharactersForSeason( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	string seasonRef = calcEntry.enumKeys[0]

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) : ( seasonRef ) {
		array<int> numKillsList = []
		foreach ( ItemFlavor character in GetAllCharacters() )
		{
			numKillsList.append( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.season_character_kills, seasonRef, ItemFlavor_GetGUIDString( character ) ), when ) )
		}
		numKillsList.sort()
		numKillsList.reverse()
		return numKillsList[6]
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetNumWinsWithSevenCharactersForSeason( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	string seasonRef = calcEntry.enumKeys[0]

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) : ( seasonRef ) {
		array<int> numWinsList = []
		foreach ( ItemFlavor character in GetAllCharacters() )
		{
			numWinsList.append( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.season_character_placements_win, seasonRef, ItemFlavor_GetGUIDString( character ) ), when ) )
		}
		numWinsList.sort()
		numWinsList.reverse()
		return numWinsList[6]
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetNumTop5WithSevenCharactersForSeason( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	string seasonRef = calcEntry.enumKeys[0]

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) : ( seasonRef ) {
		array<int> numTop5List = []
		foreach ( ItemFlavor character in GetAllCharacters() )
		{
			numTop5List.append( GetStat_Int( player, ResolveStatEntry( CAREER_STATS.season_character_placements_top_5, seasonRef, ItemFlavor_GetGUIDString( character ) ), when ) )
		}
		numTop5List.sort()
		numTop5List.reverse()
		return numTop5List[6]
	})

	return info
}
#endif

#if CLIENT || UI 
StatCalcFuncInfo function SetupGetNumCharactersWithMilestoneBonusBattlePassXPForSeason( StatEntry calcEntry, array<StatTemplate> sourceTemplates )
{
	StatCalcFuncInfo info

	string seasonRef = calcEntry.enumKeys[0]

	info.calcFunc_Int = (int function ( entity player, array<StatEntry> sourceEntries, int when ) : ( seasonRef ) {
		int milestone = 250000//

		int count = 0
		foreach ( ItemFlavor character in GetAllCharacters() )
		{
			int xp = GetStat_Int( player, ResolveStatEntry( CAREER_STATS.season_character_battlepass_bonus_xp, seasonRef, ItemFlavor_GetGUIDString( character ) ), when )
			if ( xp > milestone )
				count++
		}
		return count
	})

	return info
}
#endif


