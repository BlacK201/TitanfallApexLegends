//

#if(CLIENT)
	const bool DEBUG_QUEUE_PRINTS = false

	global table<string, bool> FORBIDDEN_DIALOGUE_EVENT_NAMES = {
		//
		//
	}
#endif

global function RegisterCSVDialogue
global function SPDialogueInit
global function Dialog_RegisterNetworking

#if(false)











#endif //

#if(CLIENT)
	global function SCB_PlayDialogueOnEntity
	global function SCB_PlayDialogueAtPosition
	global function SCB_PlayDialogueOnEnvironmentSpeakers
	global function SCB_AbortCurrentDialogue
	global function SetUseDialogueVDU
	global function PlayAnyClientSelfDialogueByName
	global function GetAnyDialogueAliasFromName

	global function ResumeDialogueQueue
	global function PauseDialogueQueue
	global function SuspendDialogueQueueForDurationOfSound
	global function RemovePlayerDialogueEventsFromDialogueQueue
#endif //

#if(DEV)
global function ShouldTryToReplaceMissingVoiceWithTempVoice
#endif //

struct DialogueEntryGroup
{
	string groupName
	array<int> aliasIds
	asset sourceDataTable

#if(false)

#endif //
}

struct DialogueData
{
	string alias
	int priority
	string perspective
	bool canPlayIfSolo
	string radioDisplayName
	string voice
	bool radioIntercept
	string DEV_DialogueText
	asset vduVideo

	DialogueEntryGroup& group
	int indexInGroup
}

global struct QueueItem
{
	int priority
	int entHandle = -1
	float timeAdded = -1
	bool active = false
	string debugRef = ""
	bool success = true
	int serialNum = -1
}

global struct EnvironmentSpeaker
{
	vector origin
	string crowdQuietAlias = ""
	string crowdActiveAlias = ""
	string crowdCheerAlias = ""
	string crowdRoarAlias = ""
	string crowdOvationAlias = ""
	string crowdChantAlias = ""
	string crowdEndMatchChantAlias = ""
	string activeVOLine = ""
	float quietLoopSecondsToTimeout = 0
	float activeLoopSecondsToTimeout = 0
	float cheerLoopSecondsToTimeout = 0
	float oneShotDelayBetweenReuse = 0
	float ovationLoopSecondsToTimeout = 0
	entity speakerEnt
	float distanceSqr
}

global enum eDialogueFlags
{
	SHORT_DELAY_AFTER_PLAYING =			(1<<0),
	SURVIVAL_HOST_ALL_SPEAKERS =		(1<<1),
	NO_ON_FINISHED_NOTIFY =				(1<<2),
	MUTE_PLAYER_PINGS_FOR_DURATION =	(1<<3)
}

#if(CLIENT)
struct CachedCharacterData
{
	string longName
	asset portraitImage
}
#endif //

struct
{
	array<DialogueData> registeredDialog
	table<string,DialogueEntryGroup> nameToGroupMap

	bool                dialoguePlaying = false
	array<QueueItem> queue
	var                 currentDialoguePlayingHandle
	table<string,asset> callerIDs
	table<int,bool> waitingOnDialogue
	bool                useVDU = false
	array<var> currentDialoguePlayingHandles
	int                 lastLineRequestPriority

	array<string> validVoices

	#if(DEV)
		array<string> validPerspectives = ["", "solo", "radio"] //
	#endif //

	#if(CLIENT)
		var devTextDialogueRUI
		int videoChannel = -1
		array<EnvironmentSpeaker> environmentSpeakers
		int dialoguePauseStackCount = 0
		table<string,CachedCharacterData> voiceToCachedCharDataMap
	#endif //
} file

//
global const PRIORITY_NO_QUEUE 	= 0		//
global const PRIORITY_HIGH 		= 20			//
global const PRIORITY_NORMAL 	= 10
global const PRIORITY_LOW 		= 5
global const PRIORITY_LOWEST 	= 1

#if(DEV)
global const string TEMP_VOICE = "playerM1"
#endif //

void function SPDialogueInit()
{
	#if(false)





#endif //

	AddCallback_OnItemFlavorRegistered( eItemType.character, OnCharacterRegistered )

	#if(CLIENT)
		AddCallback_OnClientScriptInit( ClientScriptInitForPlayer )
		AddCallback_EntitiesDidLoad( EnvironmentSpeakerListInit )

		RegisterSignal( "QueueUpdated" )
		RegisterSignal( "NextInQueue" )
		RegisterSignal( "RemovedFromQueue" )
		RegisterSignal( "AbortCurrentDialogue" )
		RegisterSignal( "EndSoundEarly" )

		file.videoChannel = ReserveVideoChannel()

		FlagInit( "DialogueQueuePaused", false )

		thread QueueThink()

		foreach( string eventName, bool unused in FORBIDDEN_DIALOGUE_EVENT_NAMES )
			printf( "Dialogue sound event '%s' has been disabled in script.", eventName )
	#endif //
}

const string FUNCNAME_PlayDialogueOnEntity = "SCB_PlayDialogueOnEntity"
const string FUNCNAME_PlayDialogueAtPosition = "SCB_PlayDialogueAtPosition"
const string FUNCNAME_PlayDialogueOnEnvironmentSpeakers = "SCB_PlayDialogueOnEnvironmentSpeakers"
const string FUNCNAME_AbortCurrentDialogue = "SCB_AbortCurrentDialogue"
void function Dialog_RegisterNetworking()
{
	Remote_RegisterClientFunction( FUNCNAME_PlayDialogueOnEntity, "int", -1, INT_MAX, "int", INT_MIN, INT_MAX, "int", INT_MIN, INT_MAX )
	Remote_RegisterClientFunction( FUNCNAME_PlayDialogueAtPosition, "int", -1, INT_MAX, "int", INT_MIN, INT_MAX, "vector", -MAX_WORLD_COORD, MAX_WORLD_COORD, 32 )
	Remote_RegisterClientFunction( FUNCNAME_PlayDialogueOnEnvironmentSpeakers, "int", 0, INT_MAX, "int", 0, INT_MAX, "int", 0, INT_MAX, "int", -1, INT_MAX, "entity" )
	Remote_RegisterClientFunction( FUNCNAME_AbortCurrentDialogue )
}

DialogueData function GetDataForAliasId( int index )
{
	return file.registeredDialog[index]
}

#if(false)














#endif //

#if(CLIENT)
int function GetAnyAliasIdForName( string dialogueName )
{
	if ( !(dialogueName in file.nameToGroupMap) )
		return -1
	DialogueEntryGroup group = file.nameToGroupMap[dialogueName]
	return group.aliasIds.getrandom()
}
#endif //

void function OnCharacterRegistered( ItemFlavor flavor )
{
	var block    = GetSettingsBlockForAsset( CharacterClass_GetSetFile( flavor ) )
	string voice = GetSettingsBlockString( block, "voice" ).tolower()

	if ( !file.validVoices.contains( voice ) )
	{
		file.validVoices.append( voice )
		#if(CLIENT)
			CachedCharacterData ccd
			ccd.longName = ItemFlavor_GetLongName( flavor )
			ccd.portraitImage = CharacterClass_GetCharacterLockedPortrait( flavor )
			file.voiceToCachedCharDataMap[voice] <- ccd
		#endif //
	}
}

void function EnvironmentSpeakerListInit()
{
	#if(CLIENT)
		array<entity> speakerEnts = GetEntArrayByScriptName( "info_survival_speaker_location" )

		foreach( speaker in speakerEnts )
		{
			RegisterEnvironmentSpeaker( speaker )
		}
	#endif //
}

void function RegisterEnvironmentSpeaker( entity speakerEnt )
{
	#if(CLIENT)
		EnvironmentSpeaker speaker
		speaker.origin = speakerEnt.GetOrigin()
		speaker.speakerEnt = speakerEnt

		file.environmentSpeakers.append( speaker )
	#endif //
}

void function RegisterCSVDialogue( asset dt )
{
	//
	var dataTable = GetDataTable( dt )

	int columnName = GetDataTableColumnByName( dataTable, "name" )
	int columnAlias = GetDataTableColumnByName( dataTable, "alias" )
	int columnPriority = GetDataTableColumnByName( dataTable, "priority" )
	int columnRadioDisplayName = GetDataTableColumnByName( dataTable, "radioDisplayName" )
	int columnVoice = GetDataTableColumnByName( dataTable, "voice" )
	int columnRadioIntercept = GetDataTableColumnByName( dataTable, "radioIntercept" )
	int columnVDUVideo = GetDataTableColumnByName( dataTable, "vduVideo" )
	int columnDevDialogueText = GetDataTableColumnByName( dataTable, "dialogue" )
	int optionalColumnPerspective = GetDataTableColumnByName( dataTable, "perspective" )
	int optionalCanPlayIfSolo = GetDataTableColumnByName( dataTable, "canPlayIfSolo" )

	int numRows = GetDatatableRowCount( dataTable )
	for ( int i = 0; i < numRows; i++ )
	{
		string name = GetDataTableString( dataTable, i, columnName )

		//
		if ( name == "" )
			continue

		//
		if ( name.slice( 0, 2 ) == "//" )
			continue

		string alias = GetDataTableString( dataTable, i, columnAlias )
		int priority = GetDataTableInt( dataTable, i, columnPriority )
		Assert( priority >= 0, "Dialogue alias " + alias + " has invalid priority in the dialogue csv. Must be >= 0" )

		string extraPerspective = ((optionalColumnPerspective > -1) ? GetDataTableString( dataTable, i, optionalColumnPerspective ) : "")
		#if(false)

#endif

		bool canPlayIfSolo = ((optionalCanPlayIfSolo > -1) ? GetDataTableBool( dataTable, i, optionalCanPlayIfSolo ) : true)
		string radioDisplayName = GetDataTableString( dataTable, i, columnRadioDisplayName )
		string voice = ((columnVoice > -1) ? GetDataTableString( dataTable, i, columnVoice ).tolower() : "")
		bool radioIntercept = ((columnRadioIntercept > -1) ? GetDataTableBool( dataTable, i, columnRadioIntercept ) : false)
		asset vduVideo = ((columnVDUVideo > -1) ? GetDataTableAsset( dataTable, i, columnVDUVideo ) : $"")
		string DEV_DialogueText = GetDataTableString( dataTable, i, columnDevDialogueText )

		if ( (voice.len() > 0) && (!file.validVoices.contains( voice )) )
			Warning( "Dialogue '%s' in source '%s' specifies unknown voice '%s'.", name, string( dt ), voice )

		if ( (voice.len() > 0) && (radioDisplayName.len() > 0) )
		{
			Warning( "Dialogue '%s' has both voice '%s' and radioDisplay '%s'. Will only use voice.", name, voice, radioDisplayName )
			radioDisplayName = ""
		}

		RegisterDialogueLine( name, alias, priority, radioDisplayName, voice, radioIntercept, vduVideo, DEV_DialogueText, extraPerspective, canPlayIfSolo, dt )
	}
}

string s_prevNameRegistered
void function RegisterDialogueLine( string name, string alias, int priority, string radioDisplayName, string voice, bool radioIntercept, asset vduVideo, string DEV_DialogueText, string extraPerspective, bool canPlayIfSolo, asset dt )
{
	Assert( name != "", "Can't register a line of dialogue with no name" )
	Assert( priority >= 0, "Can't register a line of dialogue with a negative priority" )
	Assert( alias != "" || DEV_DialogueText != "", "Dialogue alias " + name + " doesn't have a miles event listed or dev text. You need one or the other." )

	if ( vduVideo != $"" )
		Assert( radioDisplayName != "", "Dialogue alias " + name + " specifies a vdu bink without setting radioDisplayName as well." )

#if(false)







#endif //

	DialogueData data
	data.alias = alias
	data.priority = priority
	data.perspective = extraPerspective
	data.canPlayIfSolo = canPlayIfSolo
	data.radioDisplayName = radioDisplayName
	data.voice = voice
	data.radioIntercept = radioIntercept
	data.vduVideo = vduVideo
	data.DEV_DialogueText = DEV_DialogueText

	int aliasId = file.registeredDialog.len()
	file.registeredDialog.append( data )

	if ( !( name in file.nameToGroupMap ) )
	{
		DialogueEntryGroup newGroup
		newGroup.groupName = name
		newGroup.sourceDataTable = dt
		file.nameToGroupMap[name] <- newGroup
	}
	DialogueEntryGroup group = file.nameToGroupMap[name]
	Assert( (dt == group.sourceDataTable), format( "Dialogue entry '%s' from '%s' has already been defined in '%s'.", name, string( dt ), string( group.sourceDataTable ) ) )
	Assert( ((group.aliasIds.len() == 0) || (s_prevNameRegistered == name)), format( "Dialogue entry '%s' in '%s' is defined in more than one section. Dupes (groups) are allowed, but must be defined all one-after-another.", name, string( dt ) ) )

	data.indexInGroup = group.aliasIds.len()
	data.group = group
	group.aliasIds.append( aliasId )

	s_prevNameRegistered = name
}

#if(false)
















































#endif //

#if(false)
























































































































































//

























































//
































#endif //

#if(CLIENT)
	string function GetAnyDialogueAliasFromName( string name )
	{
		int aliasID = GetAnyAliasIdForName( name )
		Assert( aliasID >= 0, "Dialogue line " + name + " is not registered" )
		DialogueData data = GetDataForAliasId( aliasID )
		return data.alias
	}

	int s_queueItemNextNum= 0
	QueueItem function QueueAndWait( int priority, int entHandle = -1, string debugRef = "" )
	{
		//

		//
		QueueItem queueItem
		queueItem.priority = priority
		queueItem.timeAdded = Time()
		queueItem.entHandle = entHandle
		queueItem.debugRef = debugRef
		queueItem.serialNum = s_queueItemNextNum
		//
		s_queueItemNextNum += 1

		//
		if ( priority == PRIORITY_NO_QUEUE )
			return queueItem

		//
		_AddToQueue( queueItem )

		//
		table result = WaitSignal( queueItem, "NextInQueue", "RemovedFromQueue" )
		//

		queueItem.success = ( result.signal == "NextInQueue" )
		//

		//
		return queueItem
	}

	void function _AddToQueue( QueueItem queueItem )
	{
		Assert( !file.queue.contains( queueItem ) )

		file.queue.append( queueItem )
		file.queue.sort( QueueSort )

		//
		if ( file.queue.len() > 1 )
		{
			for ( int i = file.queue.len() - 1; i >= 0; i-- )
			{
				if ( file.queue[i].priority >= queueItem.priority )
					continue

				RemoveFromQueue( file.queue[i] )

				if ( i == 0 )
					AbortCurrentDialogue()
			}
		}

		//
		Signal( level, "QueueUpdated" )
	}

	void function RemovePlayerDialogueEventsFromDialogueQueue( entity player )
	{
		if ( !IsValid( player ) )
			return

		int playerEntHandle = player.GetEncodedEHandle()

		if ( file.queue.len() >= 1 )
		{
			for ( int i = file.queue.len() - 1; i >= 0; i-- )
			{
				if ( file.queue[i].entHandle == -1 )
					continue

				if ( file.queue[i].entHandle == playerEntHandle )
				{
					RemoveFromQueue( file.queue[i] )

					if ( i == 0 )
						AbortCurrentDialogue()
				}
			}
		}
	}

	void function RemoveFromQueue( QueueItem queueItem )
	{
		//
		Signal( queueItem, "RemovedFromQueue" )
		if ( file.queue.contains( queueItem ) )
			file.queue.removebyvalue( queueItem )
	}

	int function QueueSort( QueueItem itemA, QueueItem itemB )
	{
		if ( itemA.active )
			return -1
		if ( itemB.active )
			return 1

		if ( itemA.priority > itemB.priority )
			return -1
		if ( itemA.priority < itemB.priority )
			return 1

		if ( itemA.timeAdded < itemB.timeAdded )
			return -1
		if ( itemA.timeAdded > itemB.timeAdded )
			return 1

		if ( itemA.serialNum < itemB.serialNum )
			return -1
		if ( itemA.serialNum > itemB.serialNum )
			return 1

		Assert( itemA == itemB, "Queue items should never have equal sort values." )
		return 0
	}

	void function QueueThink()
	{
		QueueItem currentItem
		while ( true )
		{
			if ( file.queue.len() == 0 )
			{
				if ( DEBUG_QUEUE_PRINTS )
					printt( "Queue empty - waiting for signal" )
				WaitSignal( level, "QueueUpdated" )
				continue
			}

			FlagWaitClear( "DialogueQueuePaused" )

 			if ( file.queue.len() == 0 )
				continue

 			currentItem = file.queue[0]
			Signal( currentItem, "NextInQueue" )

			currentItem.active = true
			if ( DEBUG_QUEUE_PRINTS )
				printt( "waiting for script to clear the queue current item" )
			while ( file.queue.len() > 0 && currentItem == file.queue[0] )
			{
				if ( DEBUG_QUEUE_PRINTS )
				{
					printt( "Queue (len = " + file.queue.len() + "):" )
					foreach ( int i, QueueItem queueItem in file.queue )
					{
						if ( queueItem.active )
							printt( "  ", i, queueItem.timeAdded, "PRIORITY", queueItem.priority, queueItem.debugRef, "ACTIVE!" )
						else
							printt( "  ", i, queueItem.timeAdded, "PRIORITY", queueItem.priority, queueItem.debugRef )
					}
				}
				WaitFrame()
			}
		}
	}

	void function PauseDialogueQueue()
	{
		FlagSet( "DialogueQueuePaused" )
		file.dialoguePauseStackCount++
	}

	void function ResumeDialogueQueue()
	{
		file.dialoguePauseStackCount--
		if ( file.dialoguePauseStackCount <= 0 )
			FlagClear( "DialogueQueuePaused" )

		Assert( file.dialoguePauseStackCount >= 0, "Warning! ResumeDialogueQueue() called but queue wasn't paused!" )
	}

	void function SuspendDialogueQueueForDurationOfSound( entity player, var soundHandle )
	{
		EndSignal( player, "OnDestroy" )

		OnThreadEnd(
			function()
			{
				ResumeDialogueQueue()
			}
		)

		PauseDialogueQueue()
		WaitSignal( soundHandle, "OnSoundFinished" )
	}

	void function SCB_PlayDialogueOnEntity( int aliasID, int dialogueFlags, int speakerEHandle )
	{
		entity speaker = GetEntityFromEncodedEHandle( speakerEHandle )
		thread PlayClientDialogueOnEntity( aliasID, dialogueFlags, speaker )
	}

	void function SCB_PlayDialogueAtPosition( int aliasID, int dialogueFlags, vector pos )
	{
		thread PlayClientDialogueOnPos( aliasID, dialogueFlags, pos )
	}

	void function SCB_PlayDialogueOnEnvironmentSpeakers( int aliasID, int numSpeakers, int dialogueFlags, int responseID, entity responseSpeaker )
	{
		array<EnvironmentSpeaker> nearbySpeakers = SortEnvironmentSpeakersByClosest()
		array<entity> speakerEnts
		foreach ( int i, EnvironmentSpeaker speaker in nearbySpeakers )
		{
			if ( i >= numSpeakers )
				break
			speakerEnts.append( speaker.speakerEnt )
		}

		if ( speakerEnts.len() == 0 )
		{
			Warning( "No speakers found within 10000 units" )
			return
		}
		if ( responseID < 0 )
			thread PlayClientDialogueOnSpeakers( aliasID, dialogueFlags, speakerEnts )
		else
			thread PlayDialogueNoQueueWithQueuedResponse( aliasID, responseID, dialogueFlags, speakerEnts, responseSpeaker, 0.0, 0.0, 0.0 )
	}

	array<EnvironmentSpeaker> function SortEnvironmentSpeakersByClosest()
	{
		entity player = GetLocalClientPlayer()
		vector playerPos = player.GetOrigin()

		array<EnvironmentSpeaker> nearbySpeakers
		const float maxDistSqr = 10000 * 10000
		foreach( EnvironmentSpeaker speaker in file.environmentSpeakers )
		{
			float distanceSqr = Distance2DSqr( playerPos, speaker.origin )
			if ( distanceSqr > maxDistSqr )
				continue

			speaker.distanceSqr = distanceSqr
			nearbySpeakers.append( speaker )
		}

		nearbySpeakers.sort( DistanceCompareClosestSpeaker )

		return nearbySpeakers
	}

	int function DistanceCompareClosestSpeaker( EnvironmentSpeaker a, EnvironmentSpeaker b )
	{
		if ( a.distanceSqr > b.distanceSqr )
			return 1
		else if ( a.distanceSqr < b.distanceSqr )
			return -1

		return 0
	}

	void function PlayClientDialogue_Internal( int aliasID, int dialogueFlags, array<entity> speakers, vector pos )
	{
		DialogueData data = GetDataForAliasId( aliasID )

		string milesAlias = data.alias

		if ( speakers.len() == 1 && ! ShouldPlayDialogueIfSolo( data, speakers[0] ) )
			return

		string radioDisplayName = data.radioDisplayName
		asset specificImage = $""
		if ( milesAlias.find( "%" ) >= 0 )
		{
			Assert ( speakers.len() == 1, "Generic audio alias attempted to be made specific from multiple speakers simultaneously." )

			if ( IsValid( speakers[0] ) )
			{
				milesAlias = SpecifyAliasFromGeneric( data, speakers[0] )
			}
			else if ( speakers[0] == null )
			{
				milesAlias = SpecifyRadioDialoguePerspective( data )
				if ( (data.voice.len() > 0) && (data.voice in file.voiceToCachedCharDataMap) )
				{
					CachedCharacterData ccd = file.voiceToCachedCharDataMap[data.voice]
					radioDisplayName = ccd.longName
					specificImage = ccd.portraitImage
				}
			}
			else
			{
				Warning( "Tried to play '%s' with an invalid speaker. Couldn't specify generic alias.", milesAlias )
				return
			}
		}

		if ( DEBUG_QUEUE_PRINTS )
		{
			printt( "Dialogue Added to Queue" )
			printt( "  name:", data.group.groupName )
		}

		int speakerEHandle = -1
		if ( speakers.len() == 1 && IsValid( speakers[0] ) )
			speakerEHandle = speakers[0].GetEncodedEHandle()
		QueueItem queueItem = QueueAndWait( data.priority, speakerEHandle, milesAlias )
		//
		if ( !queueItem.success )
			return

		bool isDevText = ((data.alias == "") && (data.DEV_DialogueText != ""))
		printf( "Playing Dialogue - '%s'#%d -> '%s', priority:%d, from:'%s'  %s", data.group.groupName, data.indexInGroup, milesAlias, data.priority, string( data.group.sourceDataTable ), (isDevText ? " (dev text)" : "") )

		float duration
		float extraWait = 0.0
		string speakerName
		if ( isDevText )
		{
			duration = max( data.DEV_DialogueText.len() * 0.07, 1.5 )
			printt( "len, duration", data.DEV_DialogueText.len(), duration )
			if ( speakers.len() == 0 || !IsValid( speakers[0] ) )
				speakerName = ((radioDisplayName.len() > 0) ? Localize( radioDisplayName ) : "non_NPC")
			else
				speakerName = speakers[0].GetScriptName()
		}
		else
		{
			duration = GetSoundDuration( milesAlias )
		}

		if ( dialogueFlags & eDialogueFlags.SHORT_DELAY_AFTER_PLAYING )
			extraWait = 0.40

		var waveformRUI
		if ( radioDisplayName != "" && file.useVDU)
		{
			waveformRUI = CreateWaveform( radioDisplayName, duration, specificImage, null, data.radioIntercept )
			if ( data.vduVideo != $"" )
				StartVideoOnChannel( file.videoChannel, data.vduVideo, false, 0.0 )
		}

		foreach( entity speaker in speakers )
		{
			if ( IsValid( speaker ) )
			{
				EndSignal( speaker, "OnDeath" )
				EndSignal( speaker, "OnDestroy" )
			}
		}

		entity player = GetLocalClientPlayer()
		EndSignal( player, "AbortCurrentDialogue" )

		OnThreadEnd(
		function() : ( player, aliasID, waveformRUI, queueItem, dialogueFlags )
			{
				if ( dialogueFlags & eDialogueFlags.MUTE_PLAYER_PINGS_FOR_DURATION )
					SetCommsDialogueEnabled( true )

				//
				if ( IsValid( player ) && !(dialogueFlags & eDialogueFlags.NO_ON_FINISHED_NOTIFY) )
					player.ClientCommand( "DialogueFinishedForID " + aliasID )
				if ( IsValid ( waveformRUI ) )
					thread DestroyWaveform( waveformRUI )
				file.currentDialoguePlayingHandle = null
				file.currentDialoguePlayingHandles = []
				RemoveFromQueue( queueItem )
			}
		)

		if ( dialogueFlags & eDialogueFlags.MUTE_PLAYER_PINGS_FOR_DURATION )
			SetCommsDialogueEnabled( false )

		if ( !(milesAlias in FORBIDDEN_DIALOGUE_EVENT_NAMES) )
		{
			foreach( entity speaker in speakers )
			{
				if ( IsValid( speaker ) )
				{
					if ( isDevText )
						thread DevDialogueWithoutSoundAlias( speakerName, data.DEV_DialogueText, duration )
					else
						file.currentDialoguePlayingHandle = EmitSoundOnEntity( speaker, milesAlias )
				}
				else if ( pos != <0, 0, 0> )
				{
					if ( isDevText )
						thread DevDialogueWithoutSoundAlias( speakerName, data.DEV_DialogueText, duration )
					else
						file.currentDialoguePlayingHandle = EmitSoundAtPosition( TEAM_UNASSIGNED, pos, milesAlias )
				}
			}
		}

		if( file.currentDialoguePlayingHandle != null )
		{
			WaitSignal( file.currentDialoguePlayingHandle, "OnSoundFinished" )
			wait extraWait
		}
		else
		{
			//
			wait duration + extraWait
		}

		if ( data.vduVideo != $"" )
			StopVideoOnChannel( 2 )

		if ( SurvivalCommentary_IsEnabled() )
			SurvivalCommentary_ClearCurrentSpeakerPrefix()
	}

void function PlayAnyClientSelfDialogueByName( entity self, string name )
{
	int aliasID = GetAnyAliasIdForName( name )
	if ( aliasID < 0 )
	{
		Warning( "Dialogue line " + name + " is not registered" )
		return
	}

	int dialogueFlags = 0
	PlayClientDialogue_Internal( aliasID, dialogueFlags, [self], <0,0,0> )
}

void function PlayClientDialogueOnEntity( int aliasID, int dialogueFlags, entity ent )
{
	PlayClientDialogue_Internal( aliasID, dialogueFlags, [ent], <0,0,0> )
}

void function PlayClientDialogueOnSpeakers( int aliasID, int dialogueFlags, array<entity> speakers )
{
	PlayClientDialogue_Internal( aliasID, dialogueFlags, speakers, <0,0,0> )
}

void function PlayClientDialogueOnPos( int aliasID, int dialogueFlags, vector pos )
{
	PlayClientDialogue_Internal( aliasID, dialogueFlags, [null], pos )
}

void function PlayDialogueNoQueueWithQueuedResponse( int aliasID, int responseID, int dialogueFlags, array<entity> speakers, entity responseSpeaker, float x, float y, float z )
{
	Assert( (GetLinePriorityForAliasId( aliasID ) == PRIORITY_NO_QUEUE), "Can only use PlayDialogueNoQueueWithQueuedResponse with a leading line of priority zero!" )

	DialogueData leadingLineData = GetDataForAliasId( aliasID )
	DialogueData responseLineData = GetDataForAliasId( responseID )

	string leadingMilesAlias = leadingLineData.alias
	string responseMilesAlias = responseLineData.alias

	waitthread PlayClientDialogueOnSpeakers( aliasID, dialogueFlags, speakers )

	if ( IsValid( responseSpeaker ) )
		thread PlayClientDialogueOnEntity( responseID, dialogueFlags, responseSpeaker )
}

string function SpecifyAliasFromGeneric( DialogueData data, entity speaker )
{
	string milesAlias = data.alias

	string specifiedPerspective
	string extraPerspective = data.perspective

	specifiedPerspective = (speaker == GetLocalViewPlayer()) ? "1p" : "3p"

	if ( extraPerspective == "solo" && GetPlayerArrayOfTeam_Alive( speaker.GetTeam() ).len() == 1 )
	{
		specifiedPerspective = extraPerspective
	}

	if ( milesAlias.find( "%perspective%" ) >= 0 )
	{
		#if(DEV)
			Assert( specifiedPerspective != "", "Dialogue with generic perspective specified in CSV alias without specifying intended perspective!" )
		#endif //

		milesAlias = StringReplace( milesAlias, "%perspective%", specifiedPerspective )
	}

	string aliasWithGenericVoice = milesAlias

	string voice = GetPlayerVoice( speaker )
	if ( milesAlias.find( "%voice%" ) >= 0 )
		milesAlias = StringReplace( milesAlias, "%voice%", voice )

	#if(DEV)
	if ( ShouldTryToReplaceMissingVoiceWithTempVoice() )
	{
		if ( !DoesAliasExist( milesAlias ) )
		{
			if ( aliasWithGenericVoice.find( "%voice%" ) >= 0 )
			{
				milesAlias = StringReplace( aliasWithGenericVoice, "%voice%", TEMP_VOICE )

				if ( !DoesAliasExist( milesAlias ) )
					Warning( "Attempted to fall back to temp voice \"" + TEMP_VOICE + "\" for alias \"" + data.alias + "\", but resulting alias \"" + milesAlias + "\" does not exist in miles."  )
			}
			else
			{
				Warning( "Alias \"" + aliasWithGenericVoice + "\" does not exist, and since there is no generic voice field, we can't fall back to \"" + TEMP_VOICE + "\"." )
			}
		}
	}
	#endif //

	return milesAlias
}

string function SpecifyRadioDialoguePerspective( DialogueData data )
{
	string milesAlias = data.alias
	if ( data.perspective != "radio" )
		return data.alias

	string radioAlias = StringReplace( milesAlias, "%perspective%", data.perspective )

	//
	if ( !DoesAliasExist( radioAlias ) )
		return StringReplace( milesAlias, "%perspective%", "3p" )

	return radioAlias
}

void function SCB_AbortCurrentDialogue()
{
	AbortCurrentDialogue()
}

void function AbortCurrentDialogue()
{
	if ( file.currentDialoguePlayingHandle != null )
	{
		StopSound( file.currentDialoguePlayingHandle )
		Signal( GetLocalClientPlayer(), "AbortCurrentDialogue" )
	}
	else if (file.currentDialoguePlayingHandles.len() > 0)
	{
		foreach(handle in file.currentDialoguePlayingHandles)
		{
			StopSound( handle )
		}
		Signal( GetLocalClientPlayer(), "AbortCurrentDialogue" )
	}
}

void function ClientScriptInitForPlayer( entity player )
{
	//
	player.ClientCommand( "AllDialogueFinished" )
}

void function DevDialogueWithoutSoundAlias( string speaker, string text, float duration )
{
	if ( IsValid( file.devTextDialogueRUI ) )
		RuiDestroyIfAlive( file.devTextDialogueRUI )
	file.devTextDialogueRUI = RuiCreate( $"ui/id_dev_text.rpak", clGlobal.topoFullScreen, RUI_DRAW_HUD, 0 )
	RuiSetFloat( file.devTextDialogueRUI, "startTime", Time() )
	RuiSetString( file.devTextDialogueRUI, "speaker", speaker )
	RuiSetString( file.devTextDialogueRUI, "text", text )
	RuiSetFloat( file.devTextDialogueRUI, "duration", duration )
	RuiSetResolutionToScreenSize( file.devTextDialogueRUI )
}

void function SetUseDialogueVDU(bool useVDU)
{
	file.useVDU = useVDU
}

#endif //

#if(DEV)
bool function ShouldTryToReplaceMissingVoiceWithTempVoice()
{
	return ( GetCurrentPlaylistVarInt( "vo_fallback_to_temp", 0 ) == 1 )
}
#endif //

int function GetLinePriorityForAliasId( int aliasId )
{
	DialogueData data = GetDataForAliasId( aliasId )
	return data.priority
}

bool function ShouldPlayDialogueIfSolo( DialogueData data, entity speaker )
{
	if ( data.canPlayIfSolo )
		return true

	if ( !IsValid( speaker ) ) //
		return true

	if ( !speaker.IsPlayer() )
		return true

	return GetPlayerArrayOfTeam_Alive( speaker.GetTeam() ).len() > 1
}
