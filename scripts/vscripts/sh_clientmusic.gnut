global function ClientMusic_SharedInit
global function ClientMusic_RegisterNetworking
//
global function ClientMusic_PlayCustomTrackOnClient
global function ClientMusic_StopCustomTrackOnClient

#if(CLIENT)
global function ClientMusic_RequestStingerForNewZone

#if(false)

#endif //

#if(DEV)
global function ClientMusic_PrintStatus
#endif //
#endif //

#if(false)


#endif //

#if(false)











//






//














//







/**/

/**/
/**/
/**/
/**/
/**/
/**///

//
/**/
/**/
/**/
/**/
/**/

//
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/

/**/

//























#else //

global enum eMusicTrack
{
	ZoneTransitionStingers,

	_count
}

const array<string> [eMusicTrack._count] s_TracksMap =
[
	/**/			["music_skyway_17_slonedies"],
]

enum eMusicLevel
{
	None,
	Ambient,

	CustomTrack,

	_count
}

#endif //



#if(CLIENT)

struct TrackPlayData
{
	int shufflePos = 999
	array<int> shuffledIndices

	int lastIndex = -1
}
TrackPlayData[eMusicTrack._count] s_TrackPlayDatas

int s_lastPlayedMuscTrackDEBUG = -1
string function GetNextShuffledTrackFor( int musicTrack )
{
	s_lastPlayedMuscTrackDEBUG = musicTrack
	Assert( (musicTrack >= 0) && (musicTrack < eMusicTrack._count) )
	if ( s_TracksMap[musicTrack].len() == 0 )
		return ""

	TrackPlayData tpd = s_TrackPlayDatas[musicTrack]
	array<int> indices = tpd.shuffledIndices

	++(tpd.shufflePos)
	if ( tpd.shufflePos >= indices.len() )
	{
		tpd.shufflePos = 0

		//
		{

			int length = s_TracksMap[musicTrack].len()
			indices.resize( length )
			for ( int idx = 0; idx < length; ++idx )
				indices[idx] = idx
			indices.randomize()

			//
			if ( (length > 1) && (indices[0] == tpd.lastIndex) )
				indices.reverse()
		}
	}

	tpd.lastIndex = indices[tpd.shufflePos]
	return s_TracksMap[musicTrack][tpd.lastIndex]
}

bool s_zoneStingerRequested = false
float s_zoneStingerRequestedTime
void function ClientMusic_RequestStingerForNewZone( int zoneId )
{
	s_zoneStingerRequested = true
	s_zoneStingerRequestedTime = Time()
}

float function GetStartTimeForAlias( string alias )
{
#if(false)





#endif //
	return 0.0
}

var s_lastPlayedHandle = null
string s_lastPlayedAliasDEBUG = ""
void function StartPlayingMusic( string musicAlias )
{
	if ( musicAlias == "" )
		return
	entity player = GetLocalViewPlayer()
	if ( !IsValid( player ) )
		return

	float seekTime = GetStartTimeForAlias( musicAlias )
	if ( seekTime > 0.0001 )
		s_lastPlayedHandle = EmitSoundOnEntityWithSeek( player, musicAlias, seekTime )
	else
		s_lastPlayedHandle = EmitSoundOnEntity( player, musicAlias )
	SetPlayThroughKillReplay( s_lastPlayedHandle )
	s_lastPlayedAliasDEBUG = musicAlias

	printf( "%s() - '%s'", FUNC_NAME(), musicAlias )
}
void function StopPlayingMusic()
{
	if ( s_lastPlayedHandle != null )
		StopSound( s_lastPlayedHandle )

	s_lastPlayedHandle = null
}


int s_cachedAnswer = 0
float s_cachedAnswerTime = -999.0
float s_cachedAnswerTimeWasLastTrue = -999.0
int function CountEnemiesNearby()
{
	#if(false)













#else
		return 0
	#endif
}
float function CountEnemiesNearbyTimeSinceValid()
{
	return (Time() - s_cachedAnswerTimeWasLastTrue)
}

float function GetEffectiveDeltaSince( float timeThen )
{
	if ( timeThen <= 0.0001 )
		return 999999.0

	return (Time() - timeThen)
}

bool function CombatTriggeredCheck( entity player )
{
	#if(false)




#endif

	return false
}

const float NEARBY_FRIENDLY_RANGE = 3000.0
bool function AnyNearbyFriendlyIsCombatTriggered( entity player )
{
	array<entity> teamPlayers = GetPlayerArrayEx( "any", player.GetTeam(), TEAM_ANY, player.GetOrigin(), NEARBY_FRIENDLY_RANGE )
	foreach ( teamPlayer in teamPlayers )
	{
		if ( CombatTriggeredCheck( teamPlayer ) )
			return true
	}

	return false
}

bool function AnyNearbyFriendlyIsBleedingOut( entity player )
{
	array<entity> teamPlayers = GetPlayerArrayEx( "any", player.GetTeam(), TEAM_ANY, player.GetOrigin(), NEARBY_FRIENDLY_RANGE )
	foreach ( teamPlayer in teamPlayers )
	{
		if ( Bleedout_IsBleedingOut( teamPlayer ) )
			return true
	}

	return false
}

bool function MyTeamIsDeadMyWholeTeamIsDead( entity player )
{
	array<entity> teamPlayers = GetPlayerArrayOfTeam_Alive( player.GetTeam() )
	if ( teamPlayers.len() == 0 )
		return true

	return false
}

bool s_customTrackIsPlaying = false
void function StartPlayingCustomTrack( int musicTrack )
{
	StopPlayingCustomTrack()
	EndSignal( clGlobal.levelEnt, "ClientMusic_CustomTrackStop" )

	string alias = GetNextShuffledTrackFor( musicTrack )
	if ( alias == "" )
		return

	StartPlayingMusic( alias )
	s_customTrackIsPlaying = true

	OnThreadEnd(
		function() : ()
		{
			s_customTrackIsPlaying = false
		}
	)

	if ( s_lastPlayedHandle != null )
		WaitSignal( s_lastPlayedHandle, "OnSoundFinished" )
}

void function StopPlayingCustomTrack()
{
	Signal( clGlobal.levelEnt, "ClientMusic_CustomTrackStop" )
	Assert( s_customTrackIsPlaying == false )
}

#if(false)





















#endif //

int s_queuedCustomTrack = -1
int function GetDesiredMusicLevel( int currentMusicLevel )
{
#if(false)







//
//


























//
//


#else

	return eMusicLevel.None
#endif
}

int s_musicLevel = eMusicLevel.None
void function ClientMusicFRAME()
{
	int newMusicLevel = GetDesiredMusicLevel( s_musicLevel )
	if ( (newMusicLevel != s_musicLevel) || ((newMusicLevel == eMusicLevel.CustomTrack) && (s_queuedCustomTrack > 0)) )
	{
		StopPlayingMusic()
		if ( newMusicLevel == eMusicLevel.CustomTrack )
		{
			thread StartPlayingCustomTrack( s_queuedCustomTrack )
			s_queuedCustomTrack = -1
		}
#if(false)


//

































#endif //
	}

	if ( s_zoneStingerRequested && (s_musicLevel == eMusicLevel.Ambient || s_musicLevel == eMusicLevel.None) )
	{
		float timeSinceRequest = (Time() - s_zoneStingerRequestedTime)
		if ( timeSinceRequest < 10.0 )
			StartPlayingMusic( GetNextShuffledTrackFor( eMusicTrack.ZoneTransitionStingers ) )

		s_zoneStingerRequested = false
	}

	//
#if(false)









#endif //
}


bool s_isRunning = false
bool s_inFrame = false
bool s_inLoopWaitFrame = false
float s_startTime = -999.0
float s_lastFrameTime = 0
void function ClientMusicFrameThread()
{
	Assert( !s_isRunning )
	s_isRunning = true
	s_startTime = Time()

	WaitFrame()

	while ( true )
	{
#if(DEV)
		float preFrameTime = Time()
#endif //

		s_inFrame = true
		s_lastFrameTime = Time()
		ClientMusicFRAME()
		s_inFrame = false

#if(DEV)
		float postFrameTime = Time()
		Assert( preFrameTime == postFrameTime, format( "ClientMusicFRAME() stalled for %.2f seconds. Should have no waits.", (postFrameTime - preFrameTime) ) )
#endif //

		s_inLoopWaitFrame = true
		WaitFrame()
		s_inLoopWaitFrame = false
	}
}

#if(DEV)
void function ClientMusic_PrintStatus()
{
	printf( "running: %s, mid-frame: %s, in-waitframe: %s, startTime: %.2f, lastFrameTime: %.2f, timeNow: %.2f", (s_isRunning ? "yes" : "no"), (s_inFrame ? "yes" : "no"), (s_inLoopWaitFrame ? "yes" : "no"), s_startTime, s_lastFrameTime, Time() )
	printf( "status: %s", GetClientMusicStatusLine() )
}
#endif //

string function GetDebugNameForMusicLevel( int musicLevel )
{
	foreach( string key, int val in eMusicLevel )
	{
		if ( val == musicLevel )
			return key
	}
	return ""
}

string function GetDebugNameForMusicTrack( int musicTrack )
{
	foreach( string key, int val in eMusicTrack )
	{
		if ( val == musicTrack )
			return key
	}
	return ""
}

#if(DEV)
string function GetClientMusicStatusLine()
{
	//
	return format( "'%s',   latest - %s::'%s'", GetDebugNameForMusicLevel( s_musicLevel ), GetDebugNameForMusicTrack( s_lastPlayedMuscTrackDEBUG ), s_lastPlayedAliasDEBUG )
}
#endif //
#endif //

const string FUNCNAME_PLAYCUSTOMTRACKONCLIENT = "ClientMusic_PlayCustomTrackOnClient"
const string FUNCNAME_STOPCUSTOMTRACKONCLIENT = "ClientMusic_StopCustomTrackOnClient"

#if(false)

#endif //
void function ClientMusic_RegisterNetworking()
{
	Remote_RegisterClientFunction( FUNCNAME_PLAYCUSTOMTRACKONCLIENT, "entity", "int", -1, eMusicTrack._count )
	Remote_RegisterClientFunction( FUNCNAME_STOPCUSTOMTRACKONCLIENT, "entity" )
#if(false)

#endif
}

#if(false)















//
#endif //

void function ClientMusic_PlayCustomTrackOnClient( entity player, int musicTrack )
{
	Assert( (musicTrack >= 0) && (musicTrack < eMusicTrack._count) )

#if(false)
//

#else
	printf( "%s() - recieved for musicTrack:%d", FUNC_NAME(), musicTrack )
	s_queuedCustomTrack = musicTrack
#endif
}

void function ClientMusic_StopCustomTrackOnClient( entity player )
{
#if(false)

#else
	printf( "%s() - received.", FUNC_NAME() )
	StopPlayingCustomTrack()
#endif
}

void function ClientMusic_SharedInit()
{
#if(CLIENT)
	RegisterSignal( "ClientMusic_CustomTrackStop" )
	thread ClientMusicFrameThread()
#endif //
}


#if(false)













#endif //


